{"version":3,"file":"tf-backend-webgl.fesm.min.js","sources":["../src/canvas_util.ts","../src/tex_util.ts","../src/webgl_util.ts","../src/flags_webgl.ts","../src/glsl_version.ts","../src/shader_compiler_util.ts","../src/decode_matrix_gpu.ts","../src/decode_matrix_packed_gpu.ts","../src/encode_float_gpu.ts","../src/encode_float_packed_gpu.ts","../src/encode_matrix_gpu.ts","../src/encode_matrix_packed_gpu.ts","../src/gpgpu_util.ts","../src/gpgpu_context.ts","../src/shader_compiler.ts","../src/gpgpu_math.ts","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Equal.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GreaterEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LessEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringNGrams_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd_Impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentReduction_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringToHashBucketFast_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js","../src/kernel_utils/shared.ts","../src/packing_util.ts","../src/pack_gpu.ts","../src/reshape_packed_gpu.ts","../src/texture_manager.ts","../src/unaryop_gpu.ts","../src/unaryop_packed_gpu.ts","../src/unpack_gpu.ts","../src/backend_webgl.ts","../src/version.ts","../src/webgl.ts","../src/base.ts","../src/binaryop_gpu.ts","../src/binaryop_packed_gpu.ts","../src/kernels/Identity.ts","../src/kernels/Complex.ts","../src/kernels/LeakyRelu.ts","../src/kernels/Prelu.ts","../src/kernel_utils/kernel_funcs_utils.ts","../src/mulmat_packed_gpu.ts","../src/binaryop_complex_gpu.ts","../src/kernels/Multiply.ts","../src/kernels/Reshape.ts","../src/kernel_utils/reshape.ts","../src/mean_gpu.ts","../src/reduce_gpu.ts","../src/kernel_utils/reduce.ts","../src/transpose_gpu.ts","../src/transpose_packed_gpu.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Sum.ts","../src/kernels/Sum_impl.ts","../src/kernels/Transpose.ts","../src/kernels/BatchMatMul_impl.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Abs.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/Add.ts","../src/addn_gpu.ts","../src/addn_packed_gpu.ts","../src/kernels/AddN.ts","../src/kernels/All.ts","../src/kernels/Any.ts","../src/argminmax_gpu.ts","../src/argminmax_packed_gpu.ts","../src/kernel_utils/arg_min_max.ts","../src/kernels/ArgMax.ts","../src/kernels/ArgMin.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atan2.ts","../src/kernels/Atanh.ts","../src/pool_gpu.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPool3D.ts","../src/avg_pool_backprop_gpu.ts","../src/kernels/AvgPool3DGrad.ts","../src/kernels/AvgPoolGrad.ts","../src/kernels/BatchMatMul.ts","../src/batchnorm_gpu.ts","../src/batchnorm_packed_gpu.ts","../src/kernels/BatchNorm.ts","../src/slice_gpu.ts","../src/slice_packed_gpu.ts","../src/kernels/Slice.ts","../src/kernels/BatchToSpaceND.ts","../src/kernels/Bincount.ts","../src/kernels/NotEqual.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/kernel_utils/int.ts","../src/kernels/Ceil.ts","../src/clip_gpu.ts","../src/clip_packed_gpu.ts","../src/kernels/ClipByValue.ts","../src/complex_abs_gpu.ts","../src/kernels/ComplexAbs.ts","../src/concat_gpu.ts","../src/concat_packed_gpu.ts","../src/kernels/Imag.ts","../src/kernels/Concat_impl.ts","../src/kernels/Concat.ts","../src/conv_gpu.ts","../src/im2col_packed_gpu.ts","../src/kernels/Conv2D_impl.ts","../src/kernels/Conv2D.ts","../src/conv_backprop_gpu.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/crop_and_resize_gpu.ts","../src/kernels/CropAndResize.ts","../src/cumsum_gpu.ts","../src/kernels/Cumsum.ts","../src/kernels/DenseBincount.ts","../src/depth_to_space_gpu.ts","../src/kernels/DepthToSpace.ts","../src/conv_gpu_depthwise.ts","../src/conv_packed_gpu_depthwise.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/conv_backprop_gpu_depthwise.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/diag_gpu.ts","../src/kernels/Diag.ts","../src/dilation_gpu.ts","../src/kernels/Dilation2D.ts","../src/kernels/Einsum.ts","../src/kernels/Elu.ts","../src/kernels/EluGrad.ts","../src/kernels/Equal.ts","../src/kernels/Erf.ts","../src/kernels/Exp.ts","../src/kernels/ExpandDims.ts","../src/kernels/Expm1.ts","../src/fft_gpu.ts","../src/kernels/FFT_impl.ts","../src/kernels/FFT.ts","../src/fill_gpu.ts","../src/kernels/Fill.ts","../src/flip_left_right_gpu.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/Floor.ts","../src/kernels/FloorDiv.ts","../src/kernels/FromPixels_utils/from_pixels_gpu.ts","../src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../src/kernels/FromPixels.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/gather_nd_gpu.ts","../src/kernels/GatherNd.ts","../src/gather_gpu.ts","../src/kernels/GatherV2.ts","../src/kernels/Greater.ts","../src/kernels/GreaterEqual.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/Less.ts","../src/kernels/LessEqual.ts","../src/kernels/LinSpace.ts","../src/kernels/Log.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalAnd.ts","../src/kernels/LogicalNot.ts","../src/kernels/LogicalOr.ts","../src/lrn_gpu.ts","../src/lrn_packed_gpu.ts","../src/kernels/LRN.ts","../src/lrn_grad_gpu.ts","../src/kernels/LRNGrad.ts","../src/kernels/Max.ts","../src/kernels/Max_impl.ts","../src/kernels/Maximum.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPool3D.ts","../src/max_pool_backprop_gpu.ts","../src/kernels/MaxPool3DGrad.ts","../src/kernels/MaxPoolGrad.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/Mean.ts","../src/kernels/Mean_impl.ts","../src/kernels/Min.ts","../src/kernels/Minimum.ts","../src/mirror_pad_gpu.ts","../src/mirror_pad_packed_gpu.ts","../src/kernels/MirrorPad.ts","../src/kernels/Mod.ts","../src/multinomial_gpu.ts","../src/kernels/RealDiv.ts","../src/kernels/Sub.ts","../src/kernels/Softmax.ts","../src/kernels/Multinomial.ts","../src/kernels/Neg.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/onehot_gpu.ts","../src/kernels/OneHot.ts","../src/kernels/ZerosLike.ts","../src/kernels/OnesLike.ts","../src/kernels/Pack.ts","../src/pad_gpu.ts","../src/pad_packed_gpu.ts","../src/kernels/PadV2.ts","../src/kernels/Pow.ts","../src/kernels/Prod.ts","../src/kernels/Range.ts","../src/kernels/Reciprocal.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/resize_bilinear_gpu.ts","../src/resize_bilinear_packed_gpu.ts","../src/kernels/ResizeBilinear.ts","../src/resize_bilinear_backprop_gpu.ts","../src/kernels/ResizeBilinearGrad.ts","../src/resize_nearest_neighbor_gpu.ts","../src/resize_nearest_neighbor_packed_gpu.ts","../src/kernels/ResizeNearestNeighbor.ts","../src/resize_nearest_neighbor_backprop_gpu.ts","../src/kernels/ResizeNearestNeighborGrad.ts","../src/reverse_gpu.ts","../src/reverse_packed_gpu.ts","../src/kernels/Reverse.ts","../src/rotate_gpu.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Rsqrt.ts","../src/scatter_gpu.ts","../src/kernels/ScatterNd.ts","../src/select_gpu.ts","../src/kernels/Select.ts","../src/kernels/Selu.ts","../src/kernels/Sigmoid.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/SparseFillEmptyRows.ts","../src/kernels/SparseReshape.ts","../src/kernels/SparseSegmentMean.ts","../src/kernels/SparseSegmentSum.ts","../src/kernels/SparseToDense.ts","../src/kernels/SplitV.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/SquaredDifference.ts","../src/kernels/Step.ts","../src/strided_slice_gpu.ts","../src/kernels/StridedSlice.ts","../src/kernels/StringNGrams.ts","../src/kernels/StringSplit.ts","../src/kernels/StringToHashBucketFast.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/tile_gpu.ts","../src/kernels/Tile.ts","../src/kernels/TopK.ts","../src/transform_gpu.ts","../src/kernels/Transform.ts","../src/kernels/Unique.ts","../src/kernels/Unpack.ts","../src/segment_gpu.ts","../src/kernels/UnsortedSegmentSum.ts","../src/register_all_kernels.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(webGLVersion: number): WebGLRenderingContext {\n  if (!(webGLVersion in contexts)) {\n    const newCtx = getWebGLRenderingContext(webGLVersion);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(webGLVersion: number): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = createCanvas(webGLVersion);\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    return logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    }\n    return util.sizeToSquarishShape(size);\n  }\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() && ENV.getBool('IS_CHROME') ? 1 : -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly.\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): WebGLTexture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          tex2d, 0, internalFormat, width, height, 0, textureFormat,\n          textureType, null));\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return texture;\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n          texelDataType, dataForUpload));\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA,\n            gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n            pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                HTMLVideoElement|ImageBitmap));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, fragmentShaderSource);\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo, userCode: string,\n    usesPackedTextures: boolean): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n  });\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet =\n      inputsInfo\n          .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n          .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet =\n        getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet =\n        getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n    case 1:\n      return getSampler1D(inInfo);\n    case 2:\n      return getSampler2D(inInfo);\n    case 3:\n      return getSampler3D(inInfo);\n    case 4:\n      return getSampler4D(inInfo);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo);\n    case 2:\n      return getPackedSampler2D(inInfo);\n    case 3:\n      return getPackedSampler3D(inInfo);\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo,\n    usesPackedTextures = false): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutputPacked2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutput2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  if (texShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const userCode = program.userCode;\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(\n      inputInfos, outShapeInfo, userCode, program.packedInputs);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    const shouldThrow = false;\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData,\n    customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) =>\n        void): void {\n  validateBinaryAndProgram(binary.inShapeInfos, inputs);\n  validateBinaryAndProgram([binary.outShapeInfo], [output]);\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  if (customSetup != null) {\n    customSetup(gpgpu, binary.webGLProgram);\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n    keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode;\n  return key;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op) {\n    return (aShape, bShape, aVals, bVals, dtype) => {\n        const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultRank = newShape.length;\n        const resultStrides = util.computeStrides(newShape);\n        const resultSize = util.sizeFromShape(newShape);\n        const result = util.getTypedArrayFromDType(dtype, resultSize);\n        const aRank = aShape.length;\n        const bRank = bShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bStrides = util.computeStrides(bShape);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            for (let i = 0; i < result.length; ++i) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                result[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return [result, newShape];\n    };\n}\n//# sourceMappingURL=binary_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal + bReal, imag: aImag + bImag };\n}));\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\nexport const addConfig = {\n    kernelName: Add,\n    backendName: 'cpu',\n    kernelFunc: add\n};\n//# sourceMappingURL=Add.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op) {\n    return (values, dtype, attrs) => {\n        const newValues = util.getTypedArrayFromDType(dtype, values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return newValues;\n    };\n}\n//# sourceMappingURL=unary_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\nexport const ceilConfig = {\n    kernelName: Ceil,\n    backendName: 'cpu',\n    kernelFunc: ceil,\n};\n//# sourceMappingURL=Ceil.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const equalImpl = createSimpleBinaryKernelImpl((a, b) => (a === b) ? 1 : 0);\nexport const equal = binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\nexport const equalConfig = {\n    kernelName: Equal,\n    backendName: 'cpu',\n    kernelFunc: equal\n};\n//# sourceMappingURL=Equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\nexport const expConfig = {\n    kernelName: Exp,\n    backendName: 'cpu',\n    kernelFunc: exp,\n};\n//# sourceMappingURL=Exp.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\nexport const expm1Config = {\n    kernelName: Expm1,\n    backendName: 'cpu',\n    kernelFunc: expm1,\n};\n//# sourceMappingURL=Expm1.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\nexport const floorConfig = {\n    kernelName: Floor,\n    backendName: 'cpu',\n    kernelFunc: floor,\n};\n//# sourceMappingURL=Floor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterImpl = createSimpleBinaryKernelImpl((a, b) => (a > b) ? 1 : 0);\nexport const greater = binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\nexport const greaterConfig = {\n    kernelName: Greater,\n    backendName: 'cpu',\n    kernelFunc: greater\n};\n//# sourceMappingURL=Greater.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\nexport const greaterEqualConfig = {\n    kernelName: GreaterEqual,\n    backendName: 'cpu',\n    kernelFunc: greaterEqual\n};\n//# sourceMappingURL=GreaterEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessImpl = createSimpleBinaryKernelImpl((a, b) => (a < b) ? 1 : 0);\nexport const less = binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\nexport const lessConfig = {\n    kernelName: Less,\n    backendName: 'cpu',\n    kernelFunc: less\n};\n//# sourceMappingURL=Less.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a <= b) ? 1 : 0);\nexport const lessEqual = binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\nexport const lessEqualConfig = {\n    kernelName: LessEqual,\n    backendName: 'cpu',\n    kernelFunc: lessEqual\n};\n//# sourceMappingURL=LessEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\nexport const logConfig = {\n    kernelName: Log,\n    backendName: 'cpu',\n    kernelFunc: log,\n};\n//# sourceMappingURL=Log.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const maximumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\nexport const maximumConfig = {\n    kernelName: Maximum,\n    backendName: 'cpu',\n    kernelFunc: maximum\n};\n//# sourceMappingURL=Maximum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const minimumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\nexport const minimumConfig = {\n    kernelName: Minimum,\n    backendName: 'cpu',\n    kernelFunc: minimum\n};\n//# sourceMappingURL=Minimum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const multiplyImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n    };\n}));\nexport const multiply = binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'cpu',\n    kernelFunc: multiply\n};\n//# sourceMappingURL=Multiply.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const notEqualImpl = createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual = binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\nexport const notEqualConfig = {\n    kernelName: NotEqual,\n    backendName: 'cpu',\n    kernelFunc: notEqual\n};\n//# sourceMappingURL=NotEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\nexport const rsqrtConfig = {\n    kernelName: Rsqrt,\n    backendName: 'cpu',\n    kernelFunc: rsqrt,\n};\n//# sourceMappingURL=Rsqrt.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n    const diff = a - b;\n    return diff * diff;\n}));\nexport const squaredDifference = binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\nexport const squaredDifferenceConfig = {\n    kernelName: SquaredDifference,\n    backendName: 'cpu',\n    kernelFunc: squaredDifference\n};\n//# sourceMappingURL=SquaredDifference.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n    constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n        this.separator = util.encodeString(separator);\n        this.nGramWidths = nGramWidths;\n        this.leftPad = util.encodeString(leftPad);\n        this.rightPad = util.encodeString(rightPad);\n        this.padWidth = padWidth;\n        this.preserveShort = preserveShortSequences;\n    }\n    getPadWidth(nGramWidth) {\n        // Ngrams can be padded with either a fixed pad width or a dynamic pad\n        // width depending on the 'padWidth' arg, but in no case should the padding\n        // ever be wider than 'nGramWidth' - 1.\n        return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n    }\n    getNumNGrams(length, nGramWidth) {\n        const padWidth = this.getPadWidth(nGramWidth);\n        return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n    }\n    createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n        for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n            const padWidth = this.getPadWidth(nGramWidth);\n            const leftPadding = Math.max(0, padWidth - nGramIndex);\n            const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n            const numTokens = nGramWidth - (leftPadding + rightPadding);\n            const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n            // Calculate the total expected size of the nGram so we can reserve the\n            // correct amount of space in the string.\n            let nGramSize = 0;\n            // Size of the left padding.\n            nGramSize += leftPadding * this.leftPad.length;\n            // Size of the tokens.\n            for (let n = 0; n < numTokens; ++n) {\n                nGramSize += data[dataStartIndex + n].length;\n            }\n            // Size of the right padding.\n            nGramSize += rightPadding * this.rightPad.length;\n            // Size of the separators.\n            const numSeparators = leftPadding + rightPadding + numTokens - 1;\n            nGramSize += numSeparators * this.separator.length;\n            // Build the nGram.\n            output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n            const nGram = output[outputStartIndex + nGramIndex];\n            let nextNGramIndex = 0;\n            const appendToNGram = (str) => str.forEach((value) => nGram[nextNGramIndex++] = value);\n            for (let n = 0; n < leftPadding; ++n) {\n                appendToNGram(this.leftPad);\n                appendToNGram(this.separator);\n            }\n            // Only output first numTokens - 1 pairs of data and separator\n            for (let n = 0; n < numTokens - 1; ++n) {\n                appendToNGram(data[dataStartIndex + n]);\n                appendToNGram(this.separator);\n            }\n            // Handle case when there are no tokens or no right padding as these\n            // can result in consecutive separators.\n            if (numTokens > 0) {\n                // If we have tokens, then output last and then pair each separator\n                // with the right padding that follows, to ensure nGram ends either with\n                // the token or with the right pad.\n                appendToNGram(data[dataStartIndex + numTokens - 1]);\n                for (let n = 0; n < rightPadding; ++n) {\n                    appendToNGram(this.separator);\n                    appendToNGram(this.rightPad);\n                }\n            }\n            else {\n                // If we don't have tokens, then the last item inserted into the nGram\n                // has been the separator from the left padding loop above. Hence,\n                // output right pad and separator and make sure to finish with a\n                // padding, not a separator.\n                for (let n = 0; n < rightPadding - 1; ++n) {\n                    appendToNGram(this.rightPad);\n                    appendToNGram(this.separator);\n                }\n                appendToNGram(this.rightPad);\n            }\n        }\n    }\n    // Data and splits together form the definition of the ragged tensor,\n    // where data is 1 dimensional and contains the values of the tensor\n    // and splits denotes the indices at which each row starts.\n    compute(data, splits) {\n        // Validate that the splits are valid indices into data, only if there are\n        // splits specified.\n        const inputDataSize = data.length;\n        const splitsSize = splits.length;\n        if (splitsSize > 0) {\n            let prevSplit = splits[0];\n            if (prevSplit !== 0) {\n                throw new Error(`First split value must be 0, got ${prevSplit}`);\n            }\n            for (let i = 1; i < splitsSize; ++i) {\n                let validSplits = splits[i] >= prevSplit;\n                validSplits = validSplits && (splits[i] <= inputDataSize);\n                if (!validSplits) {\n                    throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n                }\n                prevSplit = splits[i];\n            }\n            if (prevSplit !== inputDataSize) {\n                throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n            }\n        }\n        const numBatchItems = splitsSize - 1;\n        const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n        // If there is no data or size, return an empty ragged tensor.\n        if (inputDataSize === 0 || splitsSize === 0) {\n            const empty = new Array(inputDataSize);\n            for (let i = 0; i <= numBatchItems; ++i) {\n                nGramsSplits[i] = 0;\n            }\n            return [empty, nGramsSplits];\n        }\n        nGramsSplits[0] = 0;\n        for (let i = 1; i <= numBatchItems; ++i) {\n            const length = splits[i] - splits[i - 1];\n            let numNGrams = 0;\n            this.nGramWidths.forEach((nGramWidth) => {\n                numNGrams += this.getNumNGrams(length, nGramWidth);\n            });\n            if (this.preserveShort && length > 0 && numNGrams === 0) {\n                numNGrams = 1;\n            }\n            nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n        }\n        const nGrams = new Array(nGramsSplits[numBatchItems]);\n        for (let i = 0; i < numBatchItems; ++i) {\n            const splitIndex = splits[i];\n            let outputStartIdx = nGramsSplits[i];\n            this.nGramWidths.forEach((nGramWidth) => {\n                const length = splits[i + 1] - splits[i];\n                const numNGrams = this.getNumNGrams(length, nGramWidth);\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n                outputStartIdx += numNGrams;\n            });\n            // If we're preserving short sequences, check to see if no sequence was\n            // generated by comparing the current output start idx to the original\n            // one (nGramSplitsdata). If no ngrams were generated, then they will\n            // be equal (since we increment outputStartIdx by numNGrams every\n            // time we create a set of ngrams.)\n            if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n                const dataLength = splits[i + 1] - splits[i];\n                // One legitimate reason to not have any ngrams when this.preserveShort\n                // is true is if the sequence itself is empty. In that case, move on.\n                if (dataLength === 0) {\n                    continue;\n                }\n                // We don't have to worry about dynamic padding sizes here: if padding\n                // was dynamic, every sequence would have had sufficient padding to\n                // generate at least one nGram.\n                const nGramWidth = dataLength + 2 * this.padWidth;\n                const numNGrams = 1;\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n            }\n        }\n        return [nGrams, nGramsSplits];\n    }\n}\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences)\n        .compute(data, dataSplits);\n}\n//# sourceMappingURL=StringNGrams_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction split(str, delimiters, skipEmpty) {\n    if (!str.length) {\n        return [];\n    }\n    // When the delimiter is empty, the input is split into individual characters.\n    if (delimiters.length === 0) {\n        const result = new Array(str.length);\n        for (let i = 0; i < str.length; ++i) {\n            result[i] = str.subarray(i, i + 1);\n        }\n        return result;\n    }\n    // When there is one delimiter, the input is split only at that delimiter.\n    if (delimiters.length === 1) {\n        const delimiter = delimiters[0];\n        const result = [];\n        let f = str.indexOf(delimiter);\n        while (f !== -1) {\n            const token = str.subarray(0, f);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            str = str.subarray(f + 1);\n            f = str.indexOf(delimiter);\n        }\n        if (!skipEmpty || str.length !== 0) {\n            result.push(str);\n        }\n        return result;\n    }\n    // When there are multiple delimiters, the input is split at every instance\n    // one of the delimiters appears.\n    const result = [];\n    let tokenStart = 0;\n    for (let i = 0; i < str.length + 1; i++) {\n        if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n            const token = str.subarray(tokenStart, i);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            tokenStart = i + 1;\n        }\n    }\n    return result;\n}\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n    const batchSize = input.length;\n    // Empty delimiter means split the input character by character.\n    const tokens = [];\n    let outputSize = 0;\n    let maxNumEntries = 0;\n    const numIndices = new Array(batchSize);\n    for (let i = 0; i < batchSize; ++i) {\n        const parts = split(input[i], delimiter, skipEmpty);\n        const nEntries = parts.length;\n        numIndices[i] = nEntries;\n        outputSize += nEntries;\n        maxNumEntries = Math.max(maxNumEntries, nEntries);\n        tokens.push(...parts);\n    }\n    const indices = util.getArrayFromDType('int32', outputSize * 2);\n    const values = new Array(outputSize);\n    const shape = [batchSize, maxNumEntries];\n    let c = 0;\n    for (let i = 0; i < batchSize; ++i) {\n        for (let j = 0; j < numIndices[i]; ++j) {\n            // indices is a 2d tensor with shape of [outputSize, 2]\n            indices[c * 2] = i;\n            indices[c * 2 + 1] = j;\n            values[c] = tokens[c];\n            ++c;\n        }\n    }\n    return [indices, values, shape];\n}\n//# sourceMappingURL=StringSplit_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const subImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal - bReal, imag: aImag - bImag };\n}));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\nexport const subConfig = {\n    kernelName: Sub,\n    backendName: 'cpu',\n    kernelFunc: sub\n};\n//# sourceMappingURL=Sub.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function simpleAbsImpl(vals) {\n    const resultValues = new Float32Array(vals.length);\n    for (let i = 0; i < vals.length; ++i) {\n        resultValues[i] = Math.abs(vals[i]);\n    }\n    return resultValues;\n}\nexport const abs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    assertNotComplex(x, 'abs');\n    let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const values = cpuBackend.data.get(x.dataId).values;\n    resultValues = simpleAbsImpl(values);\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'cpu',\n    kernelFunc: abs,\n};\n//# sourceMappingURL=Abs.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n    const weightsSize = util.sizeFromShape(weightsShape);\n    const outVals = util.makeZerosTypedArray(size, weightsDtype);\n    for (let i = 0; i < xVals.length; i++) {\n        const value = xVals[i];\n        if (value < 0) {\n            throw new Error('Input x must be non-negative!');\n        }\n        if (value >= size) {\n            continue;\n        }\n        if (weightsSize > 0) {\n            outVals[value] += weightsVals[i];\n        }\n        else {\n            outVals[value] += 1;\n        }\n    }\n    return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n    const numRows = xBuf.shape[0];\n    const numCols = xBuf.shape[1];\n    const outBuf = buffer([numRows, size], weightsBuf.dtype);\n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            const value = xBuf.get(i, j);\n            if (value < 0) {\n                throw new Error('Input x must be non-negative!');\n            }\n            if (value >= size) {\n                continue;\n            }\n            if (binaryOutput) {\n                outBuf.set(1, i, value);\n            }\n            else {\n                if (weightsBuf.size > 0) {\n                    outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n                }\n                else {\n                    outBuf.set(outBuf.get(i, value) + 1, i, value);\n                }\n            }\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=Bincount_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n    const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n    if (simplyConcat && dtype !== 'string') {\n        // Use built-in TypedArray.set() method for speed.\n        let offset = 0;\n        inputs.forEach(input => {\n            const size = util.sizeFromShape(input.shape);\n            outVals.set(input.vals, offset);\n            offset += size;\n        });\n    }\n    else {\n        let colOffset = 0;\n        inputs.forEach(input => {\n            const decodedData = dtype === 'string' ?\n                backend_util.fromUint8ToStringArray(input.vals) :\n                input.vals;\n            let tIdx = 0;\n            for (let row = 0; row < input.shape[0]; ++row) {\n                const resIdx = row * outShape[1] + colOffset;\n                for (let col = 0; col < input.shape[1]; ++col) {\n                    outVals[resIdx + col] = decodedData[tIdx++];\n                }\n            }\n            colOffset += input.shape[1];\n        });\n    }\n    return outVals;\n}\n//# sourceMappingURL=Concat_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {\n    const outBuf = buffer([numSlices, sliceSize], dtype);\n    for (let i = 0; i < numSlices; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            flattenIndex += dim * strides[j];\n            index.push(dim);\n        }\n        if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            outBuf.values[i * sliceSize + k] =\n                paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=GatherNd_Impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n    const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const newLoc = outBuf.indexToLoc(i);\n        const originalLoc = newLoc.slice();\n        const batchIdx = originalLoc[0];\n        const indicesIdx = originalLoc[2];\n        const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n        originalLoc[2] = indicesBuf.values[indicesIndex];\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        outBuf.values[i] = xBuf.values[originalIndex];\n    }\n    return outBuf;\n}\n//# sourceMappingURL=GatherV2_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function linSpaceImpl(start, stop, num) {\n    const step = (stop - start) / (num - 1);\n    const values = util.makeZerosTypedArray(num, 'float32');\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=LinSpace_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (Number.isNaN(value) ||\n                value > max) { // comparison with NaN always return false\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n//# sourceMappingURL=Max_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n    const minusOne = util.createScalarValue(-1, xDtype);\n    return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'neg');\n    const xVals = backend.data.get(x.dataId).values;\n    const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport const negConfig = {\n    kernelName: Neg,\n    backendName: 'cpu',\n    kernelFunc: neg\n};\n//# sourceMappingURL=Neg.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n    const outDtype = upcastType(xDtype, 'int32');\n    const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    for (let i = 0; i < outVals.length; ++i) {\n        const offset = i * reduceSize;\n        let prod = 1;\n        for (let j = 0; j < reduceSize; ++j) {\n            prod *= xVals[offset + j];\n        }\n        outVals[i] = prod;\n    }\n    return { outVals, outShape, outDtype };\n}\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'prod');\n    const xRank = x.shape.length;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    const intermediateTensorInfos = [];\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        intermediateTensorInfos.push(permutedX);\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    const xVals = backend.data.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n    let resultShape = outShape;\n    if (keepDims) {\n        resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'cpu',\n    kernelFunc: prod\n};\n//# sourceMappingURL=Prod.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function rangeImpl(start, stop, step, dtype) {\n    const sameStartStop = start === stop;\n    const increasingRangeNegativeStep = start < stop && step < 0;\n    const decreasingRangePositiveStep = stop < start && step > 1;\n    if (sameStartStop || increasingRangeNegativeStep ||\n        decreasingRangePositiveStep) {\n        return util.makeZerosTypedArray(0, dtype);\n    }\n    const numElements = Math.abs(Math.ceil((stop - start) / step));\n    const values = util.makeZerosTypedArray(numElements, dtype);\n    if (stop < start && step === 1) {\n        // Auto adjust the step's sign if it hasn't been set\n        // (or was set to 1)\n        step = -1;\n    }\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=Range_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        if (dtype === 'string') {\n            return vals.slice(flatOffset, flatOffset + length);\n        }\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const decodedData = dtype === 'string' ?\n        backend_util.fromUint8ToStringArray(vals) :\n        vals;\n    const inBuf = buffer(shape, dtype, decodedData);\n    const outBuf = buffer(size, dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n        outBuf.set(inBuf.get(...inLoc), ...outLoc);\n    }\n    if (dtype === 'string') {\n        return backend_util.fromStringArrayToUint8(outBuf.values);\n    }\n    return outBuf.values;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n//# sourceMappingURL=Slice.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n    const indicesCount = indicesShape[0];\n    const denseRows = denseShape[0];\n    const emptyRowIndicator = new Array(denseRows);\n    const reverseIndexMap = new Array(indicesCount);\n    const rank = indicesShape[1];\n    if (denseRows === 0) {\n        if (indicesCount !== 0) {\n            throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n        }\n        const outputIndices = util.getArrayFromDType(indicesDType, 0);\n        const outputValues = util.getArrayFromDType(valuesDType, 0);\n        return [\n            outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n        ];\n    }\n    let rowsAreOrdered = true;\n    let lastIndicesRow = 0;\n    const csrOffset = new Array(denseRows).fill(0);\n    for (let i = 0; i < indicesCount; ++i) {\n        // indices is a 2d tensor with shape of [N, rank]\n        const row = indices[i * rank];\n        if (row < 0) {\n            throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n        }\n        if (row >= denseRows) {\n            throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n        }\n        ++csrOffset[row];\n        rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n        lastIndicesRow = row;\n    }\n    let allRowsFull = true;\n    for (let row = 0; row < denseRows; ++row) {\n        // csrOffset here describes the number of elements in this dense row\n        const rowEmpty = (csrOffset[row] === 0);\n        emptyRowIndicator[row] = rowEmpty;\n        allRowsFull = allRowsFull && !rowEmpty;\n        // In filled version, each row has at least one element.\n        csrOffset[row] = Math.max(csrOffset[row], 1);\n        // Update csrOffset to represent the number of elements up to and\n        // including denseRows + 1:\n        //  csrOffset[0] == #{elements of row 0}\n        //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n        //  ..\n        //  csrOffset[i] == starting index for elements in row i + 1.\n        if (row > 0) {\n            csrOffset[row] += csrOffset[row - 1];\n        }\n    }\n    if (allRowsFull && rowsAreOrdered) {\n        const outputIndices = indices;\n        const outputValues = values;\n        for (let i = 0; i < indicesCount; ++i) {\n            reverseIndexMap[i] = i;\n        }\n        return [\n            outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n    else {\n        const fullIndicesCount = csrOffset[denseRows - 1];\n        const outputIndices = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n        const outputValues = util.getArrayFromDType(valuesDType, fullIndicesCount);\n        const filledCount = new Array(denseRows).fill(0);\n        // Fill in values for rows that are not missing\n        for (let i = 0; i < indicesCount; ++i) {\n            // indices is a 2d tensor with shape of [N, rank]\n            const row = indices[i * rank];\n            const offset = filledCount[row];\n            const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n            filledCount[row]++; // Increment the filled count for this row.\n            for (let j = 0; j < rank; ++j) {\n                // indices and outputIndices are 2d tensors with shape of [N, rank]\n                outputIndices[outputI * rank + j] = indices[i * rank + j];\n            }\n            outputValues[outputI] = values[i];\n            // We'll need this reverse index map to backprop correctly.\n            reverseIndexMap[i] = outputI;\n        }\n        // Fill in values for rows that are missing\n        for (let row = 0; row < denseRows; ++row) {\n            const rowCount = filledCount[row];\n            if (rowCount === 0) { // We haven't filled this row\n                const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n                // Remaining index values were set to zero already.\n                // Just need to set the row index in the right location.\n                // outputIndices is a 2d tensor with shape of [N, rank]\n                outputIndices[startingIndex * rank + 0] = row;\n                for (let col = 1; col < rank; ++col) {\n                    outputIndices[startingIndex * rank + col] = 0;\n                }\n                outputValues[startingIndex] = defaultValue;\n            }\n        }\n        return [\n            outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n}\n//# sourceMappingURL=SparseFillEmptyRows_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n    const denseSize = util.sizeFromShape(inputShape);\n    const nnz = inputIndicesShape[0];\n    const outputRank = targetShape.length;\n    // Compute the output shape. Determine product of specified dimensions, and\n    // find the index of the unspecified one.\n    const outputShape = [];\n    let product = 1;\n    let unknownIndex = -1;\n    for (let d = 0; d < outputRank; ++d) {\n        const size = targetShape[d];\n        if (size === -1) {\n            if (unknownIndex !== -1) {\n                throw new Error(`only one output dimension may be -1, not both ${unknownIndex} and ${d}`);\n            }\n            unknownIndex = d;\n            outputShape.push(1);\n        }\n        else {\n            if (size < 0) {\n                throw new Error(`size ${d} must be non-negative, not ${size}`);\n            }\n            product *= size;\n            outputShape.push(size);\n        }\n    }\n    if (unknownIndex !== -1) {\n        if (product <= 0) {\n            throw new Error('reshape cannot infer the missing ' +\n                'input size for an empty tensor unless all ' +\n                'specified input sizes are non-zero');\n        }\n        const missing = Math.trunc(denseSize / product);\n        if (product * missing !== denseSize) {\n            throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n        }\n        outputShape[unknownIndex] = missing;\n    }\n    const outputSize = util.sizeFromShape(outputShape);\n    if (outputSize !== denseSize) {\n        throw new Error(`Input to reshape is a tensor with ${denseSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n    }\n    const inputRank = inputShape.length;\n    const inputStrides = [];\n    if (inputRank > 0) {\n        inputStrides[inputRank - 1] = 1;\n        for (let d = inputRank - 2; d >= 0; --d) {\n            inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n        }\n    }\n    const outputStrides = [];\n    if (outputRank > 0) {\n        outputStrides[outputRank - 1] = 1;\n        for (let d = outputRank - 2; d >= 0; --d) {\n            outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n        }\n    }\n    const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n    for (let i = 0; i < nnz; ++i) {\n        let id = 0;\n        for (let j = 0; j < inputRank; ++j) {\n            // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n            id += inputIndices[i * inputRank + j] * inputStrides[j];\n        }\n        for (let j = 0; j < outputRank; ++j) {\n            // newIndices is a 2d tensor with shape of [nnz, outputRank]\n            newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n            id %= outputStrides[j];\n        }\n    }\n    return [newIndices, [nnz, outputRank], outputShape];\n}\n//# sourceMappingURL=SparseReshape_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseSegmentReductionImpl(input, inputShape, inputDType, indices, segmentIds, isMean = false, defaultValue = 0) {\n    const numIndices = indices.length;\n    if (numIndices !== segmentIds.length) {\n        throw new Error(`segmentIds and indices should have same size.`);\n    }\n    // Flatten the array to two dimensions\n    const inputFlat = [inputShape[0], input.length / inputShape[0]];\n    const numCol = inputFlat[1];\n    // Note that the current implementation assumes that segmentIds values are\n    // sorted.\n    const lastSegmentIdPlusOne = numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n    const outputRows = lastSegmentIdPlusOne;\n    if (outputRows < 0) {\n        throw new Error(`segment ids must be >= 0`);\n    }\n    const outputShape = inputShape.slice();\n    outputShape[0] = outputRows;\n    const outputLength = outputShape.reduce((product, value) => product * value, 1);\n    // Output array is initialized with the value 0 by default.\n    const output = util.getArrayFromDType(inputDType, outputLength);\n    // Note that we do not initialize the output buffer with a default value, so\n    // we need to explicitly set missing indices to the default value.\n    if (numIndices === 0) {\n        if (outputRows > 0) {\n            output.fill(defaultValue);\n        }\n        return [output, outputShape];\n    }\n    if (outputRows <= 0) {\n        throw new Error(`segment ids must be >= 0`);\n    }\n    let start = 0, end = 1;\n    // Index from which the output is not initialized.\n    let uninitializedIndex = 0;\n    let outIndex = segmentIds[start];\n    while (true) {\n        // We initialize nextIndex to 0 to avoid may be uninitialized warning\n        let nextIndex = 0;\n        if (end < numIndices) {\n            nextIndex = segmentIds[end];\n            if (outIndex === nextIndex) {\n                ++end;\n                continue;\n            }\n            // We have a new segment here.  Verify that the segment ids are growing.\n            if (outIndex >= nextIndex) {\n                throw new Error(`segment ids are not increasing`);\n            }\n        }\n        if (outIndex < 0 || outIndex >= outputRows) {\n            throw new Error(`Segment id ${outIndex} out of range [0, ${outputRows}), possibly because segmentIds input is not sorted.`);\n        }\n        // If there is a gap between two indices, we need to set that gap to the\n        // default value.\n        if (outIndex > uninitializedIndex) {\n            output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n        }\n        for (let i = start; i < end; ++i) {\n            const index = indices[i];\n            if (index < 0 || index >= inputFlat[0]) {\n                throw new Error(`Bad: indices[${i}] == ${indices[i]} out of range [0, ${inputFlat[0]})`);\n            }\n            for (let j = 0; j < numCol; j++) {\n                output[outIndex * numCol + j] += input[index * numCol + j];\n            }\n        }\n        if (isMean) {\n            for (let j = 0; j < numCol; j++) {\n                output[outIndex * numCol + j] /= end - start;\n            }\n        }\n        start = end;\n        ++end;\n        uninitializedIndex = outIndex + 1;\n        outIndex = nextIndex;\n        if (end > numIndices) {\n            break;\n        }\n    }\n    // Fill the gap at the end with the default value.\n    if (uninitializedIndex < outputRows) {\n        output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n    }\n    return [output, outputShape];\n}\n//# sourceMappingURL=SparseSegmentReduction_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function stridedSliceImpl(outShape, xBuf, strides, begin) {\n    const outBuf = buffer(outShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; i++) {\n        const loc = outBuf.indexToLoc(i);\n        const newLoc = new Array(loc.length);\n        for (let j = 0; j < newLoc.length; j++) {\n            newLoc[j] = loc[j] * strides[j] + begin[j];\n        }\n        outBuf.set(xBuf.get(...newLoc), ...loc);\n    }\n    return outBuf;\n}\n//# sourceMappingURL=StridedSlice_impl.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function stringToHashBucketFastImpl(input, numBuckets) {\n    const output = util.getArrayFromDType('int32', input.length);\n    for (let i = 0; i < input.length; ++i) {\n        output[i] =\n            util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n    }\n    return output;\n}\n//# sourceMappingURL=StringToHashBucketFast_impl.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\nexport function tileImpl(xBuf, reps) {\n    const newShape = new Array(xBuf.rank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xBuf.shape[i] * reps[i];\n    }\n    const result = buffer(newShape, xBuf.dtype);\n    for (let i = 0; i < result.values.length; ++i) {\n        const newLoc = result.indexToLoc(i);\n        const originalLoc = new Array(xBuf.rank);\n        for (let j = 0; j < originalLoc.length; j++) {\n            originalLoc[j] = newLoc[j] % xBuf.shape[j];\n        }\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        result.values[i] = xBuf.values[originalIndex];\n    }\n    return result;\n}\n//# sourceMappingURL=Tile_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        const valAndInd = [];\n        for (let i = 0; i < vals.length; i++) {\n            valAndInd.push({ value: vals[i], index: i });\n        }\n        valAndInd.sort((a, b) => b.value - a.value);\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        buffer(outputShape, xDtype, allTopKVals),\n        buffer(outputShape, 'int32', allTopKIndices)\n    ];\n}\n//# sourceMappingURL=TopK_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n//# sourceMappingURL=Transpose_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n    // Normalize and validate axis.\n    const $axis = util.parseAxisParam(axis, shape)[0];\n    // Calculate the new shape that is suitable for extracting data along the\n    // given axis.\n    //\n    // The rank is 3.\n    // The size of the 1st dimension is the size of all the axes < the given axis.\n    // The size of the 2nd dimension is the same as the size of the given axis.\n    // The size of the 3rd dimension is the size of all the axes > the given axis.\n    //\n    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n    // newShape would be: [2*3, 5, 4].\n    //\n    // Note that this is not the final output shape. This will be the shape for an\n    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n    // values along the given axis. To demonstrate how it works, consider the\n    // following example:\n    //\n    // Input: a 3D tensor, with shape [1, 2, 3]\n    // [\n    //   [\n    //      [1,2,3],\n    //      [4,5,6]\n    //   ]\n    // ]\n    // Axis: 2 (the last axis).\n    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n    //\n    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n    // 1*2. The re-shaped data would look like:\n    //\n    // [\n    //   [\n    //     [1], [2], [3]\n    //   ],\n    //   [\n    //     [4], [5], [6]\n    //   ]\n    // ]\n    //\n    // Then, we can construct a 3-level nested loop by the following dimension\n    // order to extract the values along the axis (dimension1):\n    // i: dimension1       // 0,1,2 (newShape[1])\n    //   m: dimension0     // 0,1   (newShape[0])\n    //     n: dimension2   // 0     (newShape[2])\n    //\n    //                       m, i, n\n    //                      ---------\n    // Iteration 0: data at [0, 0, 0] => \"1\"\n    // Iteration 1: data at [1, 0, 0] => \"4\"\n    // We got [1,4].\n    // Iteration 2: data at [0, 1, 0] => \"2\"\n    // Iteration 3: data at [1, 1, 0] => \"5\"\n    // We got [2,5].\n    // Iteration 4: data at [0, 2, 0] => \"3\"\n    // Iteration 5: data at [1, 2, 0] => \"6\"\n    // We got [3,6].\n    const newShape = [1, shape[0], 1];\n    for (let i = 0; i < $axis; i++) {\n        newShape[0] *= shape[i];\n    }\n    newShape[1] = shape[$axis];\n    for (let i = $axis + 1; i < shape.length; i++) {\n        newShape[2] *= shape[i];\n    }\n    // A map from unique elements (their string representations) to their values\n    // in \"indices\" (below).\n    const uniqueElements = {};\n    // The indices of each unique element in the original tensor along the given\n    // axis. It is 1D and has the same size as the given axis.\n    const indices = new Int32Array(shape[$axis]);\n    // Create a buffer so we can easily extract value at a given location.\n    const inputBuffer = new TensorBuffer(newShape, dtype, values);\n    // The indices along the given axis that have unique elements. This is a\n    // de-duped version of \"indices\" above.\n    const uniqueIndices = [];\n    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n    for (let i = 0; i < shape[$axis]; i++) {\n        // Extract values along the axis.\n        let element;\n        if (is1DTensor) {\n            // Fast path for 1D tensor input.\n            element = values[i].toString();\n        }\n        else {\n            const axisValues = [];\n            for (let m = 0; m < newShape[0]; m++) {\n                for (let n = 0; n < newShape[2]; n++) {\n                    axisValues.push(inputBuffer.get(m, i, n));\n                }\n            }\n            element = axisValues.join(',');\n        }\n        // Dedup and update various indices.\n        if (uniqueElements[element] !== undefined) {\n            indices[i] = uniqueElements[element];\n        }\n        else {\n            const uniqueIndex = Object.keys(uniqueElements).length;\n            uniqueElements[element] = uniqueIndex;\n            indices[i] = uniqueIndex;\n            uniqueIndices.push(i);\n        }\n    }\n    // Now we know where each of the unique elements are located along the axis\n    // (uniqueIndices). Extract them from input buffer and store them in the\n    // output buffer.\n    const outputTmpShape = newShape.slice();\n    outputTmpShape[1] = Object.keys(uniqueElements).length;\n    const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n    uniqueIndices.forEach((uniqueElementIndex, i) => {\n        for (let m = 0; m < newShape[0]; m++) {\n            for (let n = 0; n < newShape[2]; n++) {\n                outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n            }\n        }\n    });\n    // The output shape can be calculated from the input shape with the size of\n    // the given axis replaced by the number of unique elements along that axis.\n    const outputShape = shape.slice();\n    outputShape[$axis] = outputTmpShape[1];\n    return {\n        outputValues: outputBuffer.values,\n        outputShape,\n        indices,\n    };\n}\n//# sourceMappingURL=Unique_impl.js.map","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition =\n          getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(\n          rank, outputShape[outputShape.length - 1],\n          outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\n\nfunction getSourceCoordsArr(rank: number, dims: string[]): string[] {\n  const coords = [];\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(\n    rank: number, shape: number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(\n    rank: number, cols: number, rows: number, dims: string[]): string {\n  if (rank === 1) {\n    return '';\n  }\n\n  const innerDims = dims.slice(-2);\n\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\n\nfunction getOutput(shape: number[], dims: string[]): string {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  private _numBytesFree = 0;  // How many bytes that have been allocated\n                              // are available for reuse.\n  private freeTextures: {[shape: string]: WebGLTexture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: WebGLTexture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): WebGLTexture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: WebGLTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: WebGLTexture, shape: [number, number],\n      logicalTexType: TextureUsage, isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, MemoryInfo, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpgpu?: GPGPUContext) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n        env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\n          `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n          `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(\n        outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  private unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  private packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId): TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype,\n        null /* customSetup */, preventEagerUnpackingOfOutput);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customSetup);\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customSetup,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(\n            shapeAs3D, [height, width], isByteArray);\n      } else {\n        program =\n            new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.7.0';\nexport {version};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n        } else {\n          const channels = getChannels('coords', rank);\n          checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as {} as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], x.dtype);\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], x.dtype);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          int batchA = ${batchASnippet};\n          int batchB = ${batchBSnippet};\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, null /* customSetup */,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({inputs: {x}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc, CHECK_NAN_SNIPPET_BINARY, CHECK_NAN_SNIPPET_BINARY_PACKED} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET_BINARY + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_BINARY_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGrad3DConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const uniformPart = `uniform int start[${this.rank}];`;\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      uniform int start[${this.rank}];\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customSetup = program.getCustomSetupFunc($begin);\n    return backend.runWebGLProgram(program, [x], x.dtype, customSetup);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU} from '../kernel_utils/shared';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc(\n    {opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customSetup = program.getCustomSetupFunc(clipValueMin, clipValueMax);\n  return backend.runWebGLProgram(program, [x], x.dtype, customSetup);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(inputs.length / 2);\n    const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n    const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n\n    const result = concatImpl([leftSide, rightSide], axis, backend);\n\n    backend.disposeIntermediateTensorInfo(leftSide);\n    backend.disposeIntermediateTensorInfo(rightSide);\n\n    return result;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      inputs[0].shape.length > 1) {\n    const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape: number[], inputShape: number[],\n      convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {left, top} = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${\n            top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${\n            strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${\n            itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n  const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n\n  if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n      !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n      !reshapeWillBeExpensive) {\n    const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                                         xShape[0] * xShape[2] * xShape[3];\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {shape: [1, targetShape, convInfo.inChannels]}\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      transposeA,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  } else {\n    // Following optimization is specific to packed |x| with odd row count\n    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n    // we avoid expensive packed 2x2 reshape by padding row count to next,\n    // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n    // even-rows tensor before the operation and, after the batchMatMul,\n    // fix the even-rows result to have odd number of rows.\n    const targetShape = isChannelsLast ?\n        xShape[0] * xShape[1] * (xShape[2] + 1) :\n        xShape[0] * xShape[2] * (xShape[3] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing row count, after batchMatMul->...->compileProgram leads to\n    // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even row count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  const xSqueezed =\n      reshape({inputs: {x}, backend, attrs: {shape: x.shape.slice(1)}});\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n\n  intermediates.push(xSqueezed);\n  intermediates.push(w2Row);\n\n  const im2ColProgram =\n      new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n  const im2Col = backend.runWebGLProgram(im2ColProgram, [xSqueezed], 'float32');\n  const im2ColReshaped = reshape({\n    inputs: {x: im2Col},\n    backend,\n    attrs: {shape: [1, x2ColShape[0], x2ColShape[1]]}\n  });\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      im2ColReshaped.shape as [number, number, number],\n      w2Row.shape as [number, number, number],\n      [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias,\n      fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] = [im2ColReshaped, w2Row];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n\n  const outShape = isChannelsLast ?\n      [1, outHeight, outWidth, convInfo.outChannels] :\n      [1, convInfo.outChannels, outHeight, outWidth];\n  const out =\n      reshape({inputs: {x: product}, backend, attrs: {shape: outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const program = new Conv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nexport const cos = unaryKernelFunc({opSnippet: COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class CumSumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  index: WebGLUniformLocation;\n\n  constructor(shape: number[], exclusive: boolean, reverse: boolean) {\n    this.outputShape = shape;\n    const rank = shape.length;\n    const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n    const length = shape[shape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cumsum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      uniform float index;\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(index: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.index == null) {\n        this.index = gpgpu.getUniformLocation(webGLProgram, 'index');\n      }\n      gpgpu.gl.uniform1f(this.index, index);\n    };\n  }\n}\n\nfunction getCoords(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumSumProgram} from '../cumsum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumsum shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cumsum parallel algorithm, ref:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumSumProgram(permutedX.shape, false, reverse);\n    const customSetup = program.getCustomSetupFunc(i);\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customSetup);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cumsum, shift the end result in the direction of sum\n  // and add 0 to the front index.\n  if (exclusive) {\n    const program = new CumSumProgram(permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xC${c} = vec4(0.0);`;\n      }\n      mainLoop += `\n        xR = xRCorner + ${r * dilationHeight};\n        if (xR >=0 && xR < ${xNumRows}) {\n      `;\n\n      for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n        const colIndex = texelC * 2;\n        const c = colIndex * dilationWidth;\n\n        mainLoop += `\n          xC = xCCorner + ${c};\n          `;\n\n        if (strideWidth === 1) {\n          if (colIndex < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n\n              mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n              `;\n              // This texel has been read in previous iteration if the dilation\n              // is 1.\n              if (dilationWidth === 1 && c > 0) {\n                mainLoop += `\n                xC${colIndex} = vec4(xTexelC${c - 2}.zw, xTexelC${c}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${c}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${c}.xy);\n                  }\n                  `;\n              }\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if (xC >= 0 && xC < ${xNumCols} && xTexelC${c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${c};\n                `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n\n              const nextTexelOffset = padLeft % 2 === 0 ?\n                  util.nearestLargerEven(dilationWidth) :\n                  dilationWidth;\n\n              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                    c + 2}Ready == 0) {\n                    xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${xNumCols}) {\n                      xTexelC${c + 2}.zw = vec2(0.0);\n                    }\n                    xTexelC${c + 2}Ready = 1;\n                  }\n                  `;\n\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                      c}Ready == 0) {\n                      xTexelC${c} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${c}Ready = 1;\n                    }\n                    `;\n                }\n\n                mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.xy);\n                  `;\n              } else {\n                // If dilation is 1 and padding is odd, we have already read the\n                // texel when constructing the previous x value. Here we can\n                // simply skip the texture read.\n                if (nextTexelOffset === 1) {\n                  mainLoop += `\n                    xC${colIndex + 1} = xTexelC${c};\n                    `;\n                } else {\n                  mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                      c + 2}Ready == 0) {\n                      xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${xNumCols}) {\n                        xTexelC${c + 2}.zw = vec2(0.0);\n                      }\n                      xTexelC${c + 2}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${c + 2};\n                    `;\n                }\n              }\n            }\n          }\n        } else {  // stride === 2\n          if (c < filterWidth) {\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n            // even, xC${colIndex +1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `\n            // vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols} && xTexelC${\n                  c + 2}Ready == 0) {\n                  xTexelC${c + 2} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${xNumCols}) {\n                    xTexelC${c + 2}.zw = vec2(0.0);\n                  }\n                  xTexelC${c + 2}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${c + 2}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols} && xTexelC${c}Ready == 0) {\n                  xTexelC${c} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${xNumCols}) {\n                    xTexelC${c}.zw = vec2(0.0);\n                  }\n                  xTexelC${c}Ready = 1;\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${\n                  c + 2}Ready == 0) {\n                  xTexelC${c + 2} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${xNumCols}) {\n                    xTexelC${c + 2}.zw = vec2(0.);\n                  }\n                  xTexelC${c + 2}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${c}.xy, xTexelC${c + 2}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${c}.zw, xTexelC${c + 2}.zw);\n                `;\n              }\n            }\n          }\n        }\n\n        // localize the dotProd accumulation within the loop, the theory is for\n        // GPU with limited cache, accumulate sum across large amount of\n        // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n        // 50 variables)\n        if (colIndex < filterWidth) {\n          mainLoop += `\n            wTexel = getW(${r}, ${c}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              wTexel = getW(${r}, ${c + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n          }\n        }\n      }\n      mainLoop += `\n        }\n      `;\n    }\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU} from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU,\n});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = `return exp(x);`;\nexport const exp = unaryKernelFunc(\n    {opSnippet: EXP, packedOpSnippet: EXP, cpuKernelImpl: expImplCPU});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  valueLoc: WebGLUniformLocation;\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customSetup = program.getCustomSetupFunc(value as number);\n    return backend.runWebGLProgram(program, [], dtype, customSetup);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap,\n        0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n    const inputs: TensorInfo[] = [x, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n\n  const result = backend.runWebGLProgram(program, programInputs, 'float32');\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: number[], axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('int(getIndices(resRC.x, resRC.z))');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU} from '../kernel_utils/shared';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU} from '../kernel_utils/shared';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\nconst LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = `return log(1.0 + x);`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPoolGrad3DConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as {} as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(seed: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.seedLoc == null) {\n        this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n      }\n      gpgpu.gl.uniform1f(this.seedLoc, seed);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customSetup = program.getCustomSetupFunc(seed);\n\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customSetup);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = `return -x;`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], indices.dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  valueLoc: WebGLUniformLocation;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n        uniform float value;\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n      uniform float value;\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  valueLoc: WebGLUniformLocation;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n      uniform float value;\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customSetup = program.getCustomSetupFunc(constantValue);\n          return backend.runWebGLProgram(program, [x], x.dtype, customSetup);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\nimport {ResizeNearestNeighborPackedProgram} from '../resize_nearest_neighbor_packed_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeNearestNeighborPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeNearestNeighborProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  paramsLoc: WebGLUniformLocation;\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n\n  getCustomSetupFunc(\n      centerX: number, centerY: number, sinFactor: number, cosFactor: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.paramsLoc == null) {\n        this.paramsLoc =\n            gpgpu.getUniformLocationNoThrow(webGLProgram, 'params');\n      }\n      gpgpu.gl.uniform4f(\n          this.paramsLoc, centerX, centerY, sinFactor, cosFactor);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customSetup = program.getCustomSetupFunc(\n        centerX, centerY, Math.sin(radians), Math.cos(radians));\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customSetup);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport const sigmoid = unaryKernelFunc({opSnippet: SIGMOID});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nexport const sin = unaryKernelFunc({opSnippet: SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseFillEmptyRowsImplCPU} from '../kernel_utils/shared';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendWebGL\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $denseShape = backend.readSync(denseShape.dataId) as TypedArray;\n  const $defaultValue =\n      backend.readSync(defaultValue.dataId)[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImplCPU(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n  const sumDupeIndices = false;\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc({opSnippet: SQRT});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([$x]);\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get($x.dataId);\n      const values = xTexData.values as TypedArray;\n      const xBuf = buffer($x.shape, $x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(outShape, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(outShape, $x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram($begin, $strides, outShape);\n      result = backend.runWebGLProgram(program, [$x], $x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringToHashBucketFastImplCPU} from '../kernel_utils/shared';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendWebGL,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImplCPU(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPoolGrad3DConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPoolGrad3DConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  LRNConfig,\n  LRNGradConfig,\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atan2Config,\n  atanConfig,\n  atanhConfig,\n  avgPool3DConfig,\n  avgPoolConfig,\n  avgPoolGrad3DConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexAbsConfig,\n  complexConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  depthwiseConv2dNativeConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  log1pConfig,\n  logConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  maxConfig,\n  maxPool3DConfig,\n  maxPoolConfig,\n  maxPoolGrad3DConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maximumConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  relu6Config,\n  reluConfig,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n"],"names":["contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","newCtx","Error","canvas","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","env","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","callAndCheck","func","returnValue","getBool","error","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","shaderInfoLog","lineNumberRegexResult","lineNumberRegex","exec","lineNumber","shaderLines","split","pad","length","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","i","beforeErrorLines","slice","errorLine","afterErrorLines","join","logShaderSourceAndInfoLog","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","d","nearestLargerEven","squeezeResult","squeezeShape","newShape","batchDim","cols","isEven","n","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","min","getWebGLDisjointQueryTimerVersion","queryTimerVersion","hasExtension","isWebGLVersionEnabled","e","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","COLOR_BUFFER_HALF_FLOAT","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","assertNotComplex","tensor","opName","Array","isArray","forEach","t","assert","dtype","viewport","scissor","ENV","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","strides","computeStrides","stride","getFlatIndexFrom3D","registerFlag","get","device_util","isMobile","threshold","ENCODE_FLOAT_SNIPPET","DecodeMatrixProgram","[object Object]","outputShape","this","DENSE","texShape","glsl","userCode","shader_util.getLogicalCoordinatesFromFlatIndex","DecodeMatrixPackedProgram","EncodeFloatProgram","DOWNLOAD","EncodeFloatPackedProgram","EncodeMatrixProgram","inputIsUnsignedByte","shader_util.getFlatIndexFrom3D","EncodeMatrixPackedProgram","mainLoop","row","col","channel","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","Float32Array","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","tex_util.getUnpackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","tex_util.getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","set","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","batch","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","GPGPUContext","glVersion","COLOR_BUFFER_FLOAT","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","debug","disposed","warn","outputTexture","finish","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","bindTextureToFrameBuffer","result","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","fenceContext","createFence","pollFence","query","isFencePassed","sync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","gpgpu_util.downloadMatrixFromPackedOutputTexture","webgl_util.createFragmentShader","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","webgl_util.validateProgram","vertexAttrsAreBound","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","shouldThrow","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","outputMatrixTexture","setOutputMatrixTextureDriver","outputPackedMatrixTexture","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","webgl_util.validateFramebuffer","debugValidate","drawElements","TRIANGLES","UNSIGNED_SHORT","disjointQueryTimerExtension","getQueryTimerExtension","ext","getQueryTimerExtensionWebGL2","createQuery","TIME_ELAPSED_EXT","getQueryTimerExtensionWebGL1","createQueryEXT","beginQueryEXT","endQueryEXT","repeatedTry","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","arr","linearSearchLastTrue","itemsToPoll","x","isDoneFn","resolveFn","push","pollItems","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","y","getBroadcastDims","backend_util","makeShader","inputsInfo","usesPackedTextures","prefixSnippets","shapeInfo","logicalShape","isUniform","name","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","outShape","inputInfo","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","type","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","inTexShape","flatOffset","getSamplerAtOutputCoords","getInputSamplingSnippet","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","getOutputScalarCoords","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","batches","b","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","coordsFromIndexSnippet","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","texNumR","texNumC","tNumR","tNumC","offset","getFlatOffsetUniformName","getSamplerScalar","getUniformSampler","getSampler1D","keptDims","squeezedShape","params","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSamplerScalar","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","rank","getPackedSamplerND","inSize","newInputInfo","JSON","parse","stringify","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","assertAndGetBroadcastShape","resultRank","resultStrides","resultSize","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","bBroadcastDims","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","a","createSimpleUnaryImpl","values","attrs","newValues","ceilImpl","xi","equalImpl","expImpl","exp","expm1Impl","expm1","floorImpl","floor","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","maximumImpl","aValue","bValue","minimumImpl","multiplyImpl","notEqualImpl","rsqrtImpl","sqrt","squaredDifferenceImpl","diff","StringNGramsOp","separator","nGramWidths","leftPad","padWidth","preserveShortSequences","encodeString","preserveShort","nGramWidth","getPadWidth","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","nGram","nextNGramIndex","appendToNGram","str","value","splits","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","getArrayFromDType","empty","getNumNGrams","nGrams","outputStartIdx","createNGrams","dataLength","delimiters","skipEmpty","subarray","delimiter","f","token","tokenStart","subImpl","vals","resultValues","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","xBuf","weightsBuf","binaryOutput","numCols","outBuf","j","simplyConcat","colOffset","decodedData","fromUint8ToStringArray","tIdx","resIdx","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","paramsShape","paramsSize","flattenIndex","dim","k","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","start","stop","step","reduceSize","Number","isNaN","xShape","xDtype","minusOne","createScalarValue","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","numElements","begin","isContinous","slice_util","isSliceContinous","xStrides","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","indices","indicesShape","indicesDType","valuesDType","denseShape","defaultValue","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","rowsAreOrdered","lastIndicesRow","csrOffset","fill","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","missing","trunc","outputSize","inputRank","inputStrides","outputStrides","newIndices","id","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","outputLength","reduce","end","uninitializedIndex","outIndex","nextIndex","newLoc","dataSplits","compute","batchSize","tokens","maxNumEntries","parts","nEntries","c","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","reps","sorted","lastDim","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","perm","xRank","xSize","newStrides","axis","$axis","parseAxisParam","uniqueElements","Int32Array","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","axisValues","m","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","addImplCPU","bincountImpl","bincountImplCPU","bincountReduceImpl","bincountReduceImplCPU","ceilImplCPU","concatImpl","concatImplCPU","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherNdImpl","gatherNdImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterImplCPU","greaterEqualImplCPU","lessImplCPU","lessEqualImplCPU","linSpaceImpl","linSpaceImplCPU","logImplCPU","maxImpl","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImpl","negImplCPU","notEqualImplCPU","prodImpl","prodImplCPU","rangeImpl","rangeImplCPU","rsqrtImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","sparseFillEmptyRowsImpl","sparseFillEmptyRowsImplCPU","sparseReshapeImpl","sparseReshapeImplCPU","sparseSegmentReductionImpl","sparseSegmentReductionImplCPU","stridedSliceImpl","stridedSliceImplCPU","stringNGramsImpl","stringNGramsImplCPU","stringSplitImpl","stringSplitImplCPU","stringToHashBucketFastImpl","stringToHashBucketFastImplCPU","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU","shared","getVecChannels","getChannels","PackProgram","channels","outOfBoundsCondition","dims","cond","getOutOfBoundsCondition","setup","innerDims","getSetup","sourceCoords","coord","getSourceCoordsArr","getOutput","ReshapePackedProgram","thisRC","TextureManager","gpgpu","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","texBytes","computeBytes","numFreeTextures","numUsedTextures","_numBytesFree","newTexture","shift","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","_numBytesAllocated","logicalTexType","deleteTexThreshold","deleteMatrixTexture","texList","texIndex","splice","logEnabled","total","freeRatio","round","numBytesAllocated","numBytesFree","tex","internalFormatForPhysicalTexType","packedWidth","packedHeight","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","UnaryOpProgram","opSnippet","ABS","CLONE","UnaryOpPackedProgram","UnpackProgram","getSourceCoords","whereImpl","kernel_impls","binaryCaches","CPU_HANDOFF_SIZE_THRESHOLD","MathBackendWebGL","KernelBackend","super","WeakMap","WeakSet","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","nextDataId","numDataIds","pendingDeletes","checkNumericalProblems","dataId","refCount","has","tensorInfo","disposeData","complexTensorInfos","unary_op.CLONE","runWebGLProgram","readSync","disposeIntermediateTensorInfo","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","pendingRead","subscribers","read","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","tex_util.getDenseTexShape","createAndWaitForFence","ps","all","dTypeVals","delete","pendingDisposal","removeDataId","decodeString","webgl_util.canBeRepresented","tmpTarget","downloadMatrixFromPackedTexture","shouldUsePackedProgram","webgl_util.getShapeAs3D","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","uploadWaitMs","kernelMs","wallMs","sum","ms","unreliable","numBytesInGPU","numBytesInGPUAllocated","numBytesInGPUFree","startMs","endMs","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","dataRefCount","releaseTexture","uploadToGPU","sizeThreshold","every","condition","condVals","dataSync","outInfo","compileAndRun","makeTensorFromDataId","shouldExecuteOnCPU","outValues","makeOutput","packedUnaryOp","unary_op.ABS","isString","encodedValues","write","makeTensorInfo","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","outputDtype","customSetup","preventEagerUnpackingOfOutput","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","dataToDispose","inputsData","packedInputs","uniformValues","unpackTensor","packTensor","webgl_util.isReshapeFree","savedInput","packedReshape","outputData","keyInputs","concat","hasOffset","keyUserCode","constructor","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","variableNames","inShapeInfos","source","shader_compiler.makeShader","webGLProgram","infLoc","nanLoc","uniformLocations","varName","gpgpu_math.compileProgram","startTimer","outTex","setOutputPackedMatrixTexture","setOutputMatrixTexture","uniform1f","Infinity","NaN","varLoc","varOffsetLoc","uniform1fv","setInputMatrixTexture","executeProgram","gpgpu_math.runProgram","info","endTimer","glFlushThreshold","time","lastGlFlushTime","unpacked","getBinary","dispose","HTMLCanvasElement","remove","floatPrecisionValue","tidy","debugFlag","underflowCheckValue","scalar","floatPrecision","webgl_util.getTextureShapeFromLogicalShape","isByteArray","tempDenseInputHandle","getTexture","preventEagerUnpacking","encodedOutputTarget","outputTexData","acquireTexture","float32Values","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","bytesPerElement","forceHalfFloat","isBrowser","registerBackend","webgl","BinaryOpProgram","BinaryOpPackedProgram","checkOutOfBounds","checkOutOfBoundsString","identity","args","backend","incRef","identityConfig","kernelName","Identity","backendName","kernelFunc","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","LEAKYRELU","LEAKYRELU_PACKED","leakyReluConfig","LeakyRelu","$alpha","PRELU","PRELU_PACKED","preluConfig","Prelu","unaryKernelFunc","packedOpSnippet","cpuKernelImpl","webglBackend","$dtype","xData","binaryKernelFunc","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","decodedAVals","decodedBVals","out","mapActivationToShaderProgram","activation","packed","CHECK_NAN_SNIPPET","MatMulPackedProgram","transposeA","transposeB","addBias","hasPreluActivation","hasLeakyreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","activationSnippet","applyActivationSnippet","addBiasSnippet","batchASnippet","batchBSnippet","COMPLEX_MULTIPLY","BinaryOpComplexProgram","MUL","multiply","realProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","realPart","imagPart","cpuMultiply","multiplyConfig","Multiply","reshape","$shape","inferFromImplicitShape","$xSize","xTexData","reshapeConfig","Reshape","MeanProgram","reduceInfo","divisor","windowSize","outSize","windowSizeNearestVec4","windowSizeVec4Remainder","updateSnippet","denominator","isInt","toPrecision","ReduceProgram","reduceType","initializationValue","compareOp","vecType","reductionType","reductionStages","stages","computeOptimalWindowSize","getReductionStages","previousResult","TransposeProgram","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","TransposePackedProgram","outputOrder","switchedOrder","nextColumn","getc","keepDims","reductionIndices","origAxes","axes","permutedAxes","getAxesPermutation","sumInputIsTransposed","sumInput","getInnerMostAxes","assertAxesAreInnerMostDims","sumOutShape","expandShapeToKeepDim","reshapedInput","reduced","sumOutType","sumImpl","sumConfig","Sum","transpose","cpuTranspose","transposeConfig","Transpose","batchMatMulImpl","bias","preluActivationWeights","leakyreluAlpha","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","a3dShape","b3dShape","a3d","b3d","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","aVec","bVec","shouldReshapeB","aVec3d","bVec3d","$leakyreluAlpha","outReshaped","_fusedMatMulConfig","_FusedMatMul","absConfig","Abs","acosConfig","Acos","acoshConfig","Acosh","ADD","addConfig","Add","cpuAdd","AddNProgram","shapes","_","snippets","variable","operation","AddNPackedProgram","addNConfig","AddN","addN","tensors","midIndex","leftSide","rightSide","d1","d2","allConfig","All","permutedX","a2D","anyConfig","Any","ArgMinMaxProgram","firstPass","compOp","indexSnippet","ArgMinMaxPackedProgram","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReduce","bestIndicesA","argReducePacked","argMinMaxReduce","intermediateTensorInfos","reshaped","argMaxConfig","ArgMax","$x","argMinConfig","ArgMin","asinConfig","Asin","asinhConfig","Asinh","atanConfig","Atan","atan2Config","Atan2","CHECK_NAN_SNIPPET_BINARY","atanhConfig","Atanh","Pool2DProgram","convInfo","poolType","computePositions","flattenPositions","includeBatchInIndex","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","isAvgPool","batchFlattenPositionStr","inHeight","inWidth","inChannels","flattenPositionStr","filterWidthNearestVec4","filterWidthVec4Remainder","Pool3DProgram","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","inDepth","avgPoolConfig","AvgPool","filterSize","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterHeight","avgPoolProgram","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","AvgPool2DBackpropProgram","avgMultiplier","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","outDepth","avgPoolGrad3DConfig","AvgPool3DGrad","dy","avgPoolBackpropProgram","avgPoolGradConfig","AvgPoolGrad","batchMatMulConfig","BatchMatMul","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","offsetSnippet","scaleSnippet","BatchNormPackedProgram","batchNormConfig","FusedBatchNorm","mean","variance","scale","finalInputs","SliceProgram","destSize","uniformPart","getCoords","body","startLoc","getUniformLocationNoThrow","uniform1iv","SlicePackedProgram","sourceLoc","getChannel","upperRow","lowerRow","$begin","$size","parseSliceParams","assertParamsValid","getCustomSetupFunc","newTexData","assign","shallowSlice","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","toDispose","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","bincountConfig","Bincount","weights","notEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf.zeros","floatX","hasEncodingLoss","int","zerosTensorInfo","CEIL","ceilConfig","Ceil","ClipProgram","minLoc","maxLoc","ClipPackedProgram","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbsConfig","ComplexAbs","programInputs","ConcatProgram","computeOutShape","offsets","lastIndex","lastShift","ConcatPackedProgram","lastChannels","allChannels","getValueSnippet","shiftedChannels","channelIdx","imagConfig","Imag","reals","imags","realConcated","imagConcated","r","runOnCpu","tensors2D","innerSize","inputsValShapes","finalOutShape","computeTensors2D","reshapedResult","$inputs","assertParamsConsistent","concatConfig","Concat","Conv2DProgram","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","Conv3DProgram","Im2ColPackedProgram","itemsPerBlockRow","unrolled","conv2dByMatMul","sharedMatMulDim","outerShapeX","outerShapeFilter","outChannels","batchMatMulWillBeUnpacked","reshapeWillBeExpensive","xReshaped","originalXTexDataShape","filterReshaped","pointwiseConv","pointwiseConvTexData","conv2dWithIm2Row","x2ColShape","xSqueezed","w2Row","im2ColProgram","im2Col","im2ColReshaped","matmulProgram","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DDerFilterProgram","filterShape","Conv2DDerInputProgram","Conv3DDerFilterProgram","Conv3DDerInputProgram","conv2DBackpropFilterConfig","Conv2DBackpropFilter","conv2DBackpropInputConfig","Conv2DBackpropInput","conv3DConfig","Conv3D","computeConv3DInfo","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","conv3DBackpropInputConfig","Conv3DBackpropInputV2","cosConfig","Cos","CHECK_NAN_SNIPPET_UNARY","coshConfig","Cosh","CropAndResizeProgram","imageShape","boxShape","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","CumSumProgram","exclusive","reverse","val","idxString","getFinalCoord","cumsumConfig","Cumsum","permutation","permutedAxis","log2","prevResult","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","bufferSync","DepthToSpaceProgram","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","DepthwiseConv2DProgram","hasLeakyReluAlpha","xNumRows","xNumCols","channelMul","DepthwiseConvPacked2DProgram","texelsAcross","texelC","colIndex","nextTexelOffset","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","DepthwiseConv2DDerFilterProgram","DepthwiseConv2DDerInputProgram","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","DiagProgram","diagConfig","Diag","flat","Dilation2DProgram","dilation2DConfig","Dilation2D","computeDilation2DInfo","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","eluConfig","Elu","eluGradConfig","EluGrad","equalConfig","Equal","erfConfig","Erf","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","EXP","expConfig","Exp","$dim","expandDimsConfig","ExpandDims","EXPM1","expm1Config","Expm1","FFTProgram","component","inverse","innerDim","exponentMultiplierSnippet","PI","resultDenominator","opString","fftImpl","inputSize","innerDimensionSize","input2D","complexOutputReshaped","fftConfig","FFT","FillProgram","valueLoc","inferDtype","fillConfig","Fill","FlipLeftRightProgram","flipLeftRightConfig","FlipLeftRight","FLOOR","floorConfig","Floor","floorDivConfig","FloorDiv","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","FromPixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","videoWidth","videoHeight","fromPixels2DContext","drawImage","tempPixelHandle","fusedConv2DConfig","FusedConv2D","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","shouldPackDepthwiseConv","GatherNDProgram","sliceDim","stridesType","strideString","gatherNdConfig","GatherNd","resultShape","prepareAndValidate","flattenIndices","flattenX","outValue","GatherProgram","currentCoords","gatherV2Config","GatherV2","batchDims","parsedAxis","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","greaterConfig","Greater","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFiniteConfig","IsFinite","isInfConfig","IsInf","isNaNConfig","IsNan","lessConfig","Less","lessEqualConfig","LessEqual","linSpaceConfig","LinSpace","logConfig","Log","log1pConfig","Log1p","logicalAndConfig","LogicalAnd","logicalNotConfig","LogicalNot","logicalOrConfig","LogicalOr","LRNProgram","radius","beta","rad","maxD","powOperator","basis","LRNPackedProgram","LRNConfig","LRN","depthRadius","LRNGradProgram","LRNGradConfig","LRNGrad","maxInputIsTransposed","maxInput","maxInputValues","maxOutShape","reshapedOutput","maxConfig","Max","maximumConfig","Maximum","maxPoolConfig","MaxPool","maxPoolProgram","maxPool3DConfig","MaxPool3D","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","maxPoolGrad3DConfig","MaxPool3DGrad","maxPool3dPositionsProgram","maxPool3dPositions","maxPoolBackpropProgram","maxPoolGradConfig","MaxPoolGrad","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","indexes","poolOutput","maxPoolWithArgmaxImpl","meanConfig","Mean","meanInputIsTransposed","meanInput","meanInputValues","meanOutShape","meanImpl","minConfig","Min","minimumConfig","Minimum","MirrorPadProgram","paddings","mode","p","unpackedCoords","MirrorPadPackedProgram","cLimit","padSetup","mirrorPadConfig","MirrorPad","modConfig","Mod","MultinomialProgram","numOutcomes","numSamples","seed","seedLoc","realDiv","realDivConfig","RealDiv","SUB","sub","cpuSub","subConfig","Sub","softmax","logits","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","normalized","probs","NEG","negConfig","Neg","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","OneHotProgram","onValue","offValue","oneHotConfig","OneHot","zerosLike","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","PadProgram","constantValue","PadPackedProgram","componentSetup","paddingArea","padV2","padV2Config","PadV2","powConfig","Pow","prodConfig","Prod","range","rangeConfig","Range","reciprocalConfig","Reciprocal","reluConfig","Relu","relu6Config","Relu6","ResizeBilinearProgram","newHeight","newWidth","alignCorners","halfPixelCenters","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","sourceFracIndexRC","ResizeBilinearPackedProgram","resizeBilinearConfig","ResizeBilinear","images","ResizeBilinearBackpropProgram","dyShape","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","resizeBilinearGradConfig","ResizeBilinearGrad","ResizeNearestNeighborProgram","roundBase","ResizeNearestNeighborPackedProgram","resizeNearestNeighborConfig","ResizeNearestNeighbor","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","ReverseProgram","inCoords","getInCoord","ReversePackedProgram","nextRow","inCoordsArray","channels1","getR","getG","getB","getA","reverseConfig","Reverse","$dims","RotateProgram","fillValue","fillSnippet","centerX","centerY","sinFactor","cosFactor","paramsLoc","uniform4f","rotateWithOffsetConfig","RotateWithOffset","radians","center","getImageCenter","sin","cos","roundConfig","Round","rsqrtConfig","Rsqrt","ScatterProgram","updateSize","indicesRank","updatesRank","summingDupeIndex","indicesString","indicesSnippet","updatesString","updatesSnippet","scatterNdConfig","ScatterNd","updates","numUpdates","calculateShapes","flattenShape","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","seluConfig","Selu","SELU_SCALEALPHA","SELU_SCALE","sigmoidConfig","Sigmoid","signConfig","Sign","sinConfig","Sin","sinhConfig","Sinh","softplusConfig","Softplus","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$values","$denseShape","$defaultValue","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","from","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","sqrtConfig","Sqrt","squareConfig","Square","squaredDifferenceConfig","SquaredDifference","stepConfig","Step","StridedSliceProgram","inputDtype","newCoords","outputAxis","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","sliceInfo","some","resultReshaped","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tanConfig","Tan","tanhConfig","Tanh","TileProgram","tile","buf","tileConfig","Tile","topKConfig","TopK","TransformProgram","interpolation","fillMode","interpolationModeId","fillModeId","transformConfig","Transform","transforms","uniqueConfig","Unique","unpackConfig","Unpack","SegmentOpProgram","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","kernelConfigs","UnsortedSegmentSum","outputDType","segOpCompute","segOpComputeOptimalWindowSize","rangeInfo","tileInfo","kernelConfig","registerKernel"],"mappings":"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D,GAKXp8D,YACIq8D,EACAC,GANJp8D,mBAAgB,CAAC,IAAK,cAOpB,MAAMs/B,EAAa68B,EAAU78B,WACvBrd,EAAYk6C,EAAUl6C,UACtB1O,EAAS4oD,EAAU5oD,OACnB8oD,EAAcF,EAAUE,YACxB98B,EAAU88B,EAAczrE,KAAKC,KAAK0iB,EAAS+rB,GACjDt/B,KAAKD,YAAc,CAACkiB,EAAWsd,GAE/B,MAGMC,EAAqD,EAA7B5uC,KAAK8lB,MAAM4oB,EAAa,GAChDG,EAA0BH,EAAa,EAEvCI,EAAgB,sDAItB,IAAI48B,EAAwB,GACxB/oD,EAAS+rB,EAAa,IACxBg9B,EAAwB,uCACM/oD,kEAMhC,IAAIgpD,EAA4B,GAC5BhpD,EAAS+rB,EAAa,IACxBi9B,EAA4B,uCACEhpD,mDAMhCvT,KAAKI,SAAW,2GAIVk8D,2GAKAC,2PASEF,eAAyB/8B,+DACmB+8B,yEAI1B78B,2lBAgBlBE,kDAGqBF,mBACS,IAA5BC,8aAiBFC,yBACqC,IAA5BD,obAeTC,yBACqC,IAA5BD,+eAeTC,6DC9CL,MCwED88B,GAAgC,CACpCnW,GACAI,GACAliB,GACAE,GACAE,GACAE,GACAG,GACAU,GACAS,GACAI,GACAyB,GACAG,GACAE,GACAE,GACAI,GACAF,GACAK,GACA2C,GACAR,GACAmB,GACAI,GACAE,GACAW,GACA6B,GACAiB,GACAQ,GACAU,GACAM,GACAQ,GACAtX,GACAoZ,GACA4C,GACAE,GACAb,GACAkB,GACAE,GACAL,GACAO,GACAG,GACAsB,GACAW,GACAQ,GACAU,GACAuB,GACAE,GACAP,GACAU,GACAI,GACAG,GACAoB,GACAE,GACAE,GACAE,GACAS,GACAG,GACAG,GACAe,GACAK,GACAG,GACAG,GACAE,GACAI,GACAY,GACAE,GACAO,GACAS,GACAS,GACAE,GACA/pB,GACAiqB,GACApR,GACAsR,GACAE,GACAE,GACA1pB,GACA4pB,GACAE,GACAE,GACAI,GACAF,GACAI,GACAE,GACAE,GACAqB,GACAO,GACAH,GACAO,GACAK,GACAK,GACAnB,GACAwB,GACAO,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"}