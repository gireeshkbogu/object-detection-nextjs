{"version":3,"file":"hash_util_test.js","sourceRoot":"","sources":["../src/hash_util_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {fingerPrint64, hexToLong} from './hash_util';\nimport {ALL_ENVS, describeWithFlags} from './jasmine_util';\n\n/**\n * The ACMRandom generator is for situations where extreme statistical quality\n * is not important. ACMRandom is useful for testing since it is seeded allowing\n * for reproducible results as well as low overhead so using it will\n * not affect test speed.\n */\nclass ACMRandom {\n  static readonly MAX_INT32 = 2147483647;\n  private seed: number;\n\n  constructor(seed: number) {\n    seed = seed & 0x7fffffff;\n    if (seed === 0 || seed === ACMRandom.MAX_INT32) {\n      seed = 1;\n    }\n    this.seed = seed;\n  }\n\n  private next() {\n    const A = hexToLong('41A7');  // bits 14, 8, 7, 5, 2, 1, 0\n    const MAX_INT32 = ACMRandom.MAX_INT32;\n    // We are computing\n    //       seed = (seed * A) % MAX_INT32,    where MAX_INT32 = 2^31-1\n    //\n    // seed must not be zero or MAX_INT32, or else all subsequent computed\n    // values will be zero or MAX_INT32 respectively.  For all other values,\n    // seed will end up cycling through every number in [1,MAX_INT32-1]\n    const product = A.mul(this.seed);\n\n    // Compute (product % MAX_INT32) using the fact that\n    // ((x << 31) % MAX_INT32) == x.\n    this.seed = product.shru(31).add(product.and(MAX_INT32)).getLowBits();\n    // The first reduction may overflow by 1 bit, so we may need to repeat.\n    // mod == MAX_INT32 is not possible; using > allows for the faster\n    // sign-bit-based test.\n    if (this.seed > MAX_INT32) {\n      this.seed -= MAX_INT32;\n    }\n    return this.seed;\n  }\n\n  public rand8() {\n    return (this.next() >> 1) & 0x000000ff;\n  }\n}\n\ndescribeWithFlags('hash_util', ALL_ENVS, () => {\n  it('check incremental hashes', () => {\n    const buf = new Uint8Array(1000);\n    const r = new ACMRandom(10);\n    for (let i = 0; i < buf.length; ++i) {\n      buf[i] = r.rand8();\n    }\n\n    const expectIteration = (length: number, expectedHash: string) =>\n        expect(fingerPrint64(buf, length)).toEqual(hexToLong(expectedHash));\n\n    expectIteration(0, '9ae16a3b2f90404f');\n    expectIteration(1, '49d8a5e3fa93c327');\n    expectIteration(2, 'fd259abb0ff2bf12');\n    expectIteration(3, '781f1c6437096ac2');\n    expectIteration(4, '0f1369d6c0b45716');\n    expectIteration(5, '02d8cec6394de09a');\n    expectIteration(7, '1faf6c6d43626c48');\n    expectIteration(9, 'c93efd6dbe139be8');\n    expectIteration(12, '65abbc967c87d515');\n    expectIteration(16, '3f61450a03cff5af');\n    expectIteration(20, '5d2fe297e45fed1a');\n    expectIteration(26, 'eb665983aeb9ab94');\n    expectIteration(33, '3a5f3890b124b4a3');\n    expectIteration(42, 'f0c1cd66d7d9f246');\n    expectIteration(53, 'cf7e3e4b1efeba6d');\n    expectIteration(67, '0ced753b45740875');\n    expectIteration(84, 'a585e0be01846ff4');\n    expectIteration(105, 'fb6496deb356cdda');\n    expectIteration(132, 'f2e4c5b6db6c154a');\n    expectIteration(166, '4498451c3bca85a0');\n    expectIteration(208, 'd604355fa4d0b14e');\n    expectIteration(261, 'bb165e6b84ba9cdf');\n    expectIteration(327, '9ebfab4519b1348c');\n    expectIteration(409, '5921974ba2e9a5c2');\n    expectIteration(512, 'a86a96e7a44282e3');\n    expectIteration(640, 'dd731dfee500aa3c');\n    expectIteration(800, 'a69f3400e6c98357');\n    expectIteration(1000, '5c63b66443990bec');\n  });\n\n  // This is more thorough, but if something is wrong the output will be even\n  // less illuminating, because it just checks one integer at the end.\n  it('check many different strings', () => {\n    const iters = 800;\n    const s = new Uint8Array(4 * iters);\n    let len = 0;\n    let h = hexToLong('0');\n\n    // Helper that replaces h with a hash of itself and return a\n    // char that is also a hash of h.  Neither hash needs to be particularly\n    // good.\n    const remix = (): number => {\n      h = h.xor(h.shru(41));\n      h = h.mul(949921979);\n      return 'a'.charCodeAt(0) + h.and(0xfffff).mod(26).getLowBits();\n    };\n\n    for (let i = 0; i < iters; i++) {\n      h = h.xor(fingerPrint64(s, i));\n      s[len++] = remix();\n      h = h.xor(fingerPrint64(s, i * i % len));\n      s[len++] = remix();\n      h = h.xor(fingerPrint64(s, i * i * i % len));\n      s[len++] = remix();\n      h = h.xor(fingerPrint64(s, len));\n      s[len++] = remix();\n      const x0 = s[len - 1];\n      const x1 = s[len - 2];\n      const x2 = s[len - 3];\n      const x3 = s[len >> 1];\n      s[((x0 << 16) + (x1 << 8) + x2) % len] ^= x3;\n      s[((x1 << 16) + (x2 << 8) + x3) % len] ^= i % 256;\n    }\n\n    expect(h).toEqual(hexToLong('7a1d67c50ec7e167'));\n  });\n\n  it('check string hash', () => {\n    const fingerPrintHash = (hash: Long) => {\n      const mul = hexToLong('9ddfea08eb382d69');\n      let b = hash.mul(mul);\n      b = b.xor(b.shru(44));\n      b = b.mul(mul);\n      b = b.xor(b.shru(41));\n      b = b.mul(mul);\n      return b;\n    };\n\n    const getString = (length: number) => Uint8Array.from(\n        'x'.repeat(length).split('').map(char => char.charCodeAt(0)));\n\n    expect(fingerPrintHash(fingerPrint64(getString(40))))\n        .toEqual(hexToLong('2117170c4aebaffe'));\n    expect(fingerPrintHash(fingerPrint64(getString(60))))\n        .toEqual(hexToLong('e252963f3fd7a3af'));\n    expect(fingerPrintHash(fingerPrint64(getString(70))))\n        .toEqual(hexToLong('b0a8cf4a56c570fa'));\n    expect(fingerPrintHash(fingerPrint64(getString(80))))\n        .toEqual(hexToLong('d6ddaa49ddef5839'));\n    expect(fingerPrintHash(fingerPrint64(getString(90))))\n        .toEqual(hexToLong('168f3a694b4dce29'));\n  });\n});\n"]}