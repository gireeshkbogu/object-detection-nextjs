{"version":3,"file":"string_to_hash_bucket_fast_test.js","sourceRoot":"","sources":["../../../src/ops/string/string_to_hash_bucket_fast_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../../index';\nimport {ALL_ENVS, describeWithFlags} from '../../jasmine_util';\nimport {expectArraysClose} from '../../test_util';\n\ndescribeWithFlags('stringToHashBucketFast', ALL_ENVS, () => {\n  it('throw error if negative buckets', async () => {\n    expect(() => tf.string.stringToHashBucketFast(['a', 'b', 'c'], -1))\n        .toThrowError(/must be at least 1/);\n  });\n\n  it('throw error if zero buckets', async () => {\n    expect(() => tf.string.stringToHashBucketFast(['a', 'b', 'c'], 0))\n        .toThrowError(/must be at least 1/);\n  });\n\n  it('one bucket maps values to zero', async () => {\n    const result = tf.string.stringToHashBucketFast(['a', 'b', 'c'], 1);\n    expectArraysClose(await result.data(), [0, 0, 0]);\n  });\n\n  it('multiple buckets', async () => {\n    const result = tf.string.stringToHashBucketFast(['a', 'b', 'c', 'd'], 10);\n    // fingerPrint64('a') -> 12917804110809363939 -> mod 10 -> 9\n    // fingerPrint64('b') -> 11795596070477164822 -> mod 10 -> 2\n    // fingerPrint64('c') -> 11430444447143000872 -> mod 10 -> 2\n    // fingerPrint64('d') -> 4470636696479570465 -> mod 10 -> 5\n    expectArraysClose(await result.data(), [9, 2, 2, 5]);\n  });\n\n  it('empty input', async () => {\n    const result =\n        tf.string.stringToHashBucketFast(tf.tensor1d([], 'string'), 2147483648);\n    expectArraysClose(await result.data(), []);\n  });\n\n  it('preserve size', async () => {\n    const result = tf.string.stringToHashBucketFast(\n        [[['a'], ['b']], [['c'], ['d']], [['a'], ['b']]], 10);\n    expectArraysClose(await result.data(), [9, 2, 2, 5, 9, 2]);\n    expect(result.shape).toEqual([3, 2, 1]);\n  });\n});\n"]}