{"version":3,"file":"string_n_grams_test.js","sourceRoot":"","sources":["../../../src/ops/string/string_n_grams_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../../index';\nimport {ALL_ENVS, describeWithFlags} from '../../jasmine_util';\nimport {expectArraysEqual} from '../../test_util';\n\nasync function expectResult(\n    result: tf.NamedTensorMap, nGrams: string[], nGramsSplits: number[]) {\n  expectArraysEqual(await result.nGrams.data(), nGrams);\n  expectArraysEqual(await result.nGramsSplits.data(), nGramsSplits);\n\n  expect(result.nGrams.shape).toEqual([nGrams.length]);\n  expect(result.nGramsSplits.shape).toEqual([nGramsSplits.length]);\n\n  expect(result.nGrams.dtype).toEqual('string');\n  expect(result.nGramsSplits.dtype).toEqual('int32');\n}\n\ndescribeWithFlags('stringNGrams', ALL_ENVS, () => {\n  it('padded trigrams', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [3], 'LP', 'RP', -1, false);\n    const nGrams = [\n      'LP|LP|a', 'LP|a|b', 'a|b|c', 'b|c|d', 'c|d|RP', 'd|RP|RP',  // 0\n      'LP|LP|e', 'LP|e|f', 'e|f|RP', 'f|RP|RP'                     // 1\n    ];\n    const nGramsSplits = [0, 6, 10];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('padded bigrams and trigrams', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [2, 3], 'LP', 'RP', -1, false);\n    const nGrams = [\n      'LP|a', 'a|b', 'b|c', 'c|d', 'd|RP', 'LP|LP|a', 'LP|a|b', 'a|b|c',\n      'b|c|d', 'c|d|RP', 'd|RP|RP',                                    // 0\n      'LP|e', 'e|f', 'f|RP', 'LP|LP|e', 'LP|e|f', 'e|f|RP', 'f|RP|RP'  // 1\n    ];\n    const nGramsSplits = [0, 11, 18];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('padded bigrams', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [2], 'LP', 'RP', -1, false);\n    const nGrams = [\n      'LP|a', 'a|b', 'b|c', 'c|d', 'd|RP',  // 0\n      'LP|e', 'e|f', 'f|RP'                 // 1\n    ];\n    const nGramsSplits = [0, 5, 8];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('padding is at most nGramSize - 1', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [2], 'LP', 'RP', 4, false);\n    const nGrams = [\n      'LP|a', 'a|b', 'b|c', 'c|d', 'd|RP',  // 0\n      'LP|e', 'e|f', 'f|RP'                 // 1\n    ];\n    const nGramsSplits = [0, 5, 8];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('padded unigram and bigrams', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [1, 2], 'LP', 'RP', -1, false);\n    const nGrams = [\n      'a', 'b', 'c', 'd', 'LP|a', 'a|b', 'b|c', 'c|d', 'd|RP',  // 0\n      'e', 'f', 'LP|e', 'e|f', 'f|RP'                           // 1\n    ];\n    const nGramsSplits = [0, 9, 14];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('overlapping padded nGrams', async () => {\n    // This test validates that n-grams with both left and right padding in a\n    // single ngram token are created correctly.\n\n    // Batch items are:\n    // 0: \"a\"\n    // 1: \"b\", \"c\", \"d\"\n    // 2: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 1, 4, 6], 'int32'), '|',\n        [3], 'LP', 'RP', -1, false);\n    const nGrams = [\n      'LP|LP|a', 'LP|a|RP', 'a|RP|RP',                    // 0\n      'LP|LP|b', 'LP|b|c', 'b|c|d', 'c|d|RP', 'd|RP|RP',  // 1\n      'LP|LP|e', 'LP|e|f', 'e|f|RP', 'f|RP|RP'            // 2\n    ];\n    const nGramsSplits = [0, 3, 8, 12];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('overlapping padded multi char nGrams', async () => {\n    // Batch items are:\n    // 0: \"a\"\n    // 1: \"b\", \"c\", \"d\"\n    // 2: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['aa', 'bb', 'cc', 'dd', 'ee', 'ff'],\n        tf.tensor1d([0, 1, 4, 6], 'int32'), '|', [3], 'LP', 'RP', -1, false);\n    const nGrams = [\n      'LP|LP|aa', 'LP|aa|RP', 'aa|RP|RP',                          // 0\n      'LP|LP|bb', 'LP|bb|cc', 'bb|cc|dd', 'cc|dd|RP', 'dd|RP|RP',  // 1\n      'LP|LP|ee', 'LP|ee|ff', 'ee|ff|RP', 'ff|RP|RP'               // 2\n    ];\n    const nGramsSplits = [0, 3, 8, 12];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('multi overlapping padded nGrams', async () => {\n    // This test validates that n-grams with more than 1 padding value on each\n    // side are created correctly.\n\n    // Batch items are:\n    // 0: \"a\"\n    const result = tf.string.stringNGrams(\n        ['a'], tf.tensor1d([0, 1], 'int32'), '|', [5], 'LP', 'RP', -1, false);\n    const nGrams = [\n      'LP|LP|LP|LP|a', 'LP|LP|LP|a|RP', 'LP|LP|a|RP|RP', 'LP|a|RP|RP|RP',\n      'a|RP|RP|RP|RP'\n    ];\n    const nGramsSplits = [0, 5];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('unpadded trigrams', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [3], '', '', 0, false);\n    const nGrams = ['a|b|c', 'b|c|d'];\n    const nGramsSplits = [0, 2, 2];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('unpadded trigrams with empty sequence', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 4, 6], 'int32'), '|',\n        [3], '', '', 0, false);\n    const nGrams = ['a|b|c', 'b|c|d'];\n    const nGramsSplits = [0, 2, 2, 2];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('unpadded trigrams with preserve short', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [3], '', '', 0, true);\n    const nGrams = ['a|b|c', 'b|c|d', 'e|f'];\n    const nGramsSplits = [0, 2, 3];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('unpadded trigrams with preserve short and empty sequence', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 4, 6], 'int32'), '|',\n        [3], '', '', 0, true);\n    const nGrams = ['a|b|c', 'b|c|d', 'e|f'];\n    const nGramsSplits = [0, 2, 2, 3];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('unpadded trigrams and quad grams with preserve short', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [4, 3], '', '', 0, true);\n    const nGrams = ['a|b|c|d', 'a|b|c', 'b|c|d', 'e|f'];\n    const nGramsSplits = [0, 3, 4];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('unpadded bigrams and trigrams', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [2, 3], '', '', 0, false);\n    const nGrams = ['a|b', 'b|c', 'c|d', 'a|b|c', 'b|c|d', 'e|f'];\n    const nGramsSplits = [0, 5, 6];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('unpadded bigrams and trigrams with preserve short', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [2, 3], '', '', 0, true);\n    // Note that in this case, because the bigram 'e|f' was already generated,\n    // the op will not generate a special preserveShort bigram.\n    const nGrams = ['a|b', 'b|c', 'c|d', 'a|b|c', 'b|c|d', 'e|f'];\n    const nGramsSplits = [0, 5, 6];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('unpadded trigrams and bigrams with preserve short', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [3, 2], '', '', 0, true);\n    // Note that in this case, because the bigram 'e|f' was already generated,\n    // the op will not generate a special preserveShort bigram.\n    const nGrams = ['a|b|c', 'b|c|d', 'a|b', 'b|c', 'c|d', 'e|f'];\n    const nGramsSplits = [0, 5, 6];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('unpadded bigrams', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [2], '', '', 0, false);\n    const nGrams = ['a|b', 'b|c', 'c|d', 'e|f'];\n    const nGramsSplits = [0, 3, 4];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('overlapping unpadded nGrams', async () => {\n    // Batch items are:\n    // 0: \"a\"\n    // 1: \"b\", \"c\", \"d\"\n    // 2: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 1, 4, 6], 'int32'), '|',\n        [3], '', '', 0, false);\n    const nGrams = ['b|c|d'];\n    const nGramsSplits = [0, 0, 1, 1];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('overlapping unpadded nGrams no output', async () => {\n    // Batch items are:\n    // 0: \"a\"\n    // 1: \"b\", \"c\", \"d\"\n    // 2: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 1, 4, 6], 'int32'), '|',\n        [5], '', '', 0, false);\n    const nGrams: string[] = [];\n    const nGramsSplits = [0, 0, 0, 0];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('singly padded trigrams', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [3], 'LP', 'RP', 1, false);\n    const nGrams = [\n      'LP|a|b', 'a|b|c', 'b|c|d', 'c|d|RP',  // 0\n      'LP|e|f', 'e|f|RP'\n    ];\n    const nGramsSplits = [0, 4, 6];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('singly padded bigrams', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [2], 'LP', 'RP', 1, false);\n    const nGrams = [\n      'LP|a', 'a|b', 'b|c', 'c|d', 'd|RP',  // 0\n      'LP|e', 'e|f', 'f|RP'\n    ];\n    const nGramsSplits = [0, 5, 8];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('singly padded bigrams and 5grams', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [2, 5], 'LP', 'RP', 1, false);\n    const nGrams = [\n      'LP|a', 'a|b', 'b|c', 'c|d', 'd|RP', 'LP|a|b|c|d', 'a|b|c|d|RP',  // 0\n      'LP|e', 'e|f', 'f|RP'\n    ];\n    const nGramsSplits = [0, 7, 10];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('singly padded 5grams with preserve short', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [5], 'LP', 'RP', 1, true);\n    const nGrams = [\n      'LP|a|b|c|d', 'a|b|c|d|RP',  // 0\n      'LP|e|f|RP'\n    ];\n    const nGramsSplits = [0, 2, 3];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('overlapping singly padded nGrams', async () => {\n    // Batch items are:\n    // 0: \"a\"\n    // 1: \"b\", \"c\", \"d\"\n    // 2: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 1, 4, 6], 'int32'), '|',\n        [3], 'LP', 'RP', 1, false);\n    const nGrams = [\n      'LP|a|RP',                    // 0\n      'LP|b|c', 'b|c|d', 'c|d|RP',  // 1\n      'LP|e|f', 'e|f|RP'\n    ];\n    const nGramsSplits = [0, 1, 4, 6];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('overlapping singly padded nGrams no output', async () => {\n    // Batch items are:\n    // 0: \"a\"\n    // 1: \"b\", \"c\", \"d\"\n    // 2: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 1, 4, 6], 'int32'), '|',\n        [5], 'LP', 'RP', 1, false);\n    const nGrams = ['LP|b|c|d|RP'];\n    const nGramsSplits = [0, 0, 1, 1];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('singly padded unigrams', async () => {\n    // Batch items are:\n    // 0: \"a\", \"b\", \"c\", \"d\"\n    // 1: \"e\", \"f\"\n    const result = tf.string.stringNGrams(\n        ['a', 'b', 'c', 'd', 'e', 'f'], tf.tensor1d([0, 4, 6], 'int32'), '|',\n        [1], 'LP', 'RP', 1, false);\n    const nGrams = ['a', 'b', 'c', 'd', 'e', 'f'];\n    const nGramsSplits = [0, 4, 6];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('empty input', async () => {\n    const result = tf.string.stringNGrams(\n        tf.tensor1d([], 'string'), tf.tensor1d([], 'int32'), '|', [1], 'LP',\n        'RP', 3, false);\n    const nGrams: string[] = [];\n    const nGramsSplits: number[] = [];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('no tokens', async () => {\n    // Batch items are:\n    // 0:\n    // 1: \"a\"\n    const result = tf.string.stringNGrams(\n        ['a'], tf.tensor1d([0, 0, 1], 'int32'), '|', [3], 'L', 'R', -1, false);\n    const nGrams = [\n      'L|L|R', 'L|R|R',          // no input in first split\n      'L|L|a', 'L|a|R', 'a|R|R'  // second split\n    ];\n    const nGramsSplits = [0, 2, 5];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('no tokens no pad', async () => {\n    // Batch items are:\n    // 0:\n    // 1: \"a\"\n    const result = tf.string.stringNGrams(\n        ['a'], tf.tensor1d([0, 0, 1], 'int32'), '|', [3], '', '', 0, false);\n    const nGrams: string[] = [];\n    const nGramsSplits = [0, 0, 0];\n    await expectResult(result, nGrams, nGramsSplits);\n  });\n\n  it('throw error if first partition index is not 0', async () => {\n    expect(\n        () => tf.string.stringNGrams(\n            ['a'], tf.tensor1d([1, 1, 1], 'int32'), '|', [3], '', '', 0, false))\n        .toThrowError(/First split value must be 0/);\n  });\n\n  it('throw error if partition indices are decreasing', async () => {\n    expect(\n        () => tf.string.stringNGrams(\n            ['a'], tf.tensor1d([0, 1, 0], 'int32'), '|', [3], '', '', 0, false))\n        .toThrowError(/must be in \\[1, 1\\]/);\n  });\n\n  it('throw error if partition index is >= input size', async () => {\n    expect(\n        () => tf.string.stringNGrams(\n            ['a'], tf.tensor1d([0, 2, 1], 'int32'), '|', [3], '', '', 0, false))\n        .toThrowError(/must be in \\[0, 1\\]/);\n  });\n\n  it('throw error if last partition index is !== input size', async () => {\n    expect(\n        () => tf.string.stringNGrams(\n            ['a'], tf.tensor1d([0, 0], 'int32'), '|', [3], '', '', 0, false))\n        .toThrowError(/Last split value must be data size/);\n  });\n});\n"]}