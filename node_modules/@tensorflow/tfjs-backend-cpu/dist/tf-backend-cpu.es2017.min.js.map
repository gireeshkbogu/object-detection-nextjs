{"version":3,"file":"tf-backend-cpu.es2017.min.js","sources":["../src/cpu_util.ts","../src/backend_cpu.ts","../src/kernels/Abs.ts","../src/utils/binary_impl.ts","../src/kernels/Complex.ts","../src/utils/zeros_impl.ts","../src/kernels/Identity.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/utils/binary_utils.ts","../src/kernels/Add.ts","../src/kernels/Bincount_impl.ts","../src/utils/unary_impl.ts","../src/utils/unary_utils.ts","../src/kernels/Ceil.ts","../src/kernels/Concat_impl.ts","../src/kernels/Equal.ts","../src/kernels/Exp.ts","../src/kernels/Expm1.ts","../src/kernels/Floor.ts","../src/kernels/GatherNd_Impl.ts","../src/kernels/GatherV2_impl.ts","../src/kernels/Greater.ts","../src/kernels/GreaterEqual.ts","../src/kernels/Less.ts","../src/kernels/LessEqual.ts","../src/kernels/LinSpace_impl.ts","../src/kernels/Log.ts","../src/kernels/Max_impl.ts","../src/kernels/Maximum.ts","../src/kernels/Minimum.ts","../src/kernels/Multiply.ts","../src/kernels/Neg.ts","../src/kernels/NotEqual.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Transpose.ts","../src/kernels/Prod.ts","../src/kernels/Range_impl.ts","../src/kernels/Rsqrt.ts","../src/kernels/Slice.ts","../src/kernels/SparseFillEmptyRows_impl.ts","../src/kernels/SparseReshape_impl.ts","../src/kernels/SparseSegmentReduction_impl.ts","../src/kernels/SquaredDifference.ts","../src/kernels/StridedSlice_impl.ts","../src/kernels/StringNGrams_impl.ts","../src/kernels/StringSplit_impl.ts","../src/kernels/StringToHashBucketFast_impl.ts","../src/kernels/Sub.ts","../src/kernels/Tile_impl.ts","../src/kernels/TopK_impl.ts","../src/kernels/Unique_impl.ts","../src/base.ts","../src/kernels/Elu.ts","../src/kernels/LeakyRelu.ts","../src/kernels/Prelu.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/kernels/Sigmoid.ts","../src/utils/fused_utils.ts","../src/kernels/Reshape.ts","../src/kernels/BatchMatMul.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/AddN.ts","../src/kernels/All.ts","../src/kernels/Any.ts","../src/kernels/ArgMax.ts","../src/kernels/ArgMin.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atan2.ts","../src/kernels/Atanh.ts","../src/utils/pool_utils.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPool3D.ts","../src/kernels/AvgPool3DGrad.ts","../src/kernels/AvgPoolGrad.ts","../src/kernels/BatchNorm.ts","../src/kernels/BatchToSpaceND.ts","../src/kernels/Bincount.ts","../src/kernels/Clip.ts","../src/kernels/ComplexAbs.ts","../src/kernels/Imag.ts","../src/kernels/Concat.ts","../src/kernels/Conv2D.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/kernels/CropAndResize.ts","../src/kernels/Cumsum.ts","../src/kernels/DenseBincount.ts","../src/kernels/DepthToSpace.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/kernels/Diag.ts","../src/kernels/Dilation2D.ts","../src/kernels/Dilation2DBackpropFilter.ts","../src/kernels/Dilation2DBackpropInput.ts","../src/kernels/Sum.ts","../src/kernels/Einsum.ts","../src/kernels/EluGrad.ts","../src/kernels/Erf.ts","../src/kernels/ExpandDims.ts","../src/kernels/RealDiv.ts","../src/utils/fft_utils.ts","../src/kernels/FFT.ts","../src/kernels/Fill.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/FloorDiv.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/kernels/GatherNd.ts","../src/kernels/GatherV2.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/LinSpace.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalAnd.ts","../src/kernels/LogicalNot.ts","../src/kernels/LogicalOr.ts","../src/kernels/LRN.ts","../src/kernels/LRNGrad.ts","../src/kernels/Max.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPool3D.ts","../src/kernels/MaxPool3DGrad.ts","../src/kernels/MaxPoolGrad.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/Mean.ts","../src/kernels/Min.ts","../src/kernels/MirrorPad.ts","../src/kernels/Mod.ts","../src/kernels/Softmax.ts","../src/kernels/Multinomial.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/OneHot.ts","../src/kernels/ZerosLike.ts","../src/kernels/OnesLike.ts","../src/kernels/Pack.ts","../src/kernels/PadV2.ts","../src/kernels/Pow.ts","../src/kernels/Range.ts","../src/kernels/Reciprocal.ts","../src/kernels/ResizeBilinear.ts","../src/kernels/ResizeBilinearGrad.ts","../src/kernels/ResizeNearestNeighbor.ts","../src/kernels/ResizeNearestNeighborGrad.ts","../src/kernels/Reverse.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Scatter_impl.ts","../src/kernels/ScatterNd.ts","../src/kernels/Select.ts","../src/kernels/Selu.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/SparseFillEmptyRows.ts","../src/kernels/SparseReshape.ts","../src/kernels/SparseSegmentMean.ts","../src/kernels/SparseSegmentSum.ts","../src/kernels/SparseToDense.ts","../src/kernels/SplitV.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/Step.ts","../src/kernels/StridedSlice.ts","../src/kernels/StringNGrams.ts","../src/kernels/StringSplit.ts","../src/kernels/StringToHashBucketFast.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/kernels/Tile.ts","../src/kernels/TopK.ts","../src/kernels/Transform.ts","../src/kernels/Unique.ts","../src/kernels/Unpack.ts","../src/kernels/UnsortedSegmentSum.ts","../src/register_all_kernels.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there ðŸ‘‹. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    outBuf.values[i] = xBuf.values[originalIndex];\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n    }\n    if (row >= denseRows) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(`only one output dimension may be -1, not both ${\n            unknownIndex} and ${d}`);\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(`size ${d} must be non-negative, not ${size}`);\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          'reshape cannot infer the missing ' +\n          'input size for an empty tensor unless all ' +\n          'specified input sizes are non-zero');\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${\n          product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(`Input to reshape is a tensor with ${\n        denseSize} dense values, but the requested shape has ${\n        outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n  if (numIndices !== segmentIds.length) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(`segment ids are not increasing`);\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(`Segment id ${outIndex} out of range [0, ${\n          outputRows}), possibly because segmentIds input is not sorted.`);\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(`Bad: indices[${i}] == ${indices[i]} out of range [0, ${\n            inputFlat[0]})`);\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean): Uint8Array[] {\n  if (!str.length) {\n    return [];\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    const result: Uint8Array[] = new Array(str.length);\n    for (let i = 0; i < str.length; ++i) {\n      result[i] = str.subarray(i, i + 1);\n    }\n    return result;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    const result: Uint8Array[] = [];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return result;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  const result: Uint8Array[] = [];\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n  return result;\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const parts = split(input[i], delimiter, skipEmpty);\n    const nEntries = parts.length;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n    tokens.push(...parts);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n\n  return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clip,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\nexport const lRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\nexport const lRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function scatterImpl<R extends Rank>(\n    indices: TensorBuffer<R>, updates: TensorBuffer<R>, shape: number[],\n    outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: number,\n    sumDupeIndices: boolean): TensorBuffer<R> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values as TypedArray;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  (outBuf.values as TypedArray).fill(defaultValue);\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] +=\n            updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, $defaultValue, sumDupeIndices);\n\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const xBuf = backend.bufferSync($x);\n    const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const strides = util.computeStrides(image.shape);\n  const batchStride = strides[0];\n  const rowStride = strides[1];\n  const colStride = strides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchStride + outY * rowStride + outX * colStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipConfig} from './kernels/Clip';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lRNConfig} from './kernels/LRN';\nimport {lRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2dConfig,\n  dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig,\n  realDivConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lRNConfig,\n  lRNGradConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transposeConfig,\n  transformConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.7.0';\nexport {version};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","[object Object]","super","this","data","DataStorage","engine","nextDataId","values","shape","firstUse","env","get","backend_util","warn","dataId","id","set","refCount","outId","length","isString","encodedValues","map","d","encodeString","write","has","numDataIds","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","decodedData","decodeString","Error","buffer","makeTensorFromDataId","force","disposeData","delete","tensorInfo","f","start","now","kernelMs","unreliable","reasons","condition","condVals","epsilon","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","makeOutput","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","makeTensorInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","incRef","identityConfig","Identity","input","realVal","realConfig","Real","cast","attrs","zerosTensorInfo","floatX","disposeIntermediateTensorInfo","realPart","hasEncodingLoss","Int32Array","from","xVals","zero","toTypedArray","resultData","resultShape","a","b","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","add","Add","addConfig","bincountImpl","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","Ceil","ceilConfig","concatImpl","outShape","simplyConcat","offset","colOffset","tIdx","row","resIdx","col","equalImpl","equal","Equal","equalConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","Expm1","expm1Config","floorImpl","floor","Floor","floorConfig","gatherNdImpl","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","strides","paramsShape","paramsSize","index","flattenIndex","dim","push","k","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greater","Greater","greaterConfig","greaterEqualImpl","greaterEqual","GreaterEqual","greaterEqualConfig","lessImpl","less","Less","lessConfig","lessEqualImpl","lessEqual","LessEqual","lessEqualConfig","linSpaceImpl","stop","num","step","logImpl","log","Log","logConfig","maxImpl","reduceSize","max","Number","isNaN","maximumImpl","aValue","bValue","maximum","Maximum","maximumConfig","minimumImpl","min","minimum","Minimum","minimumConfig","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqual","NotEqual","notEqualConfig","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","getInnerMostAxes","expandShapeToKeepDim","rangeImpl","numElements","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","subarray","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","parseSliceParams","assertParamsValid","sliceConfig","Slice","sparseFillEmptyRowsImpl","indices","indicesShape","indicesDType","valuesDType","denseShape","defaultValue","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","rank","rowsAreOrdered","lastIndicesRow","csrOffset","fill","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","outputShape","product","unknownIndex","missing","trunc","outputSize","inputRank","inputStrides","outputStrides","newIndices","sparseSegmentReductionImpl","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","outputLength","reduce","output","end","uninitializedIndex","outIndex","nextIndex","squaredDifferenceImpl","diff","squaredDifference","SquaredDifference","squaredDifferenceConfig","stridedSliceImpl","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","nGramWidth","getPadWidth","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","splits","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","getNumNGrams","nGrams","outputStartIdx","createNGrams","dataLength","stringNGramsImpl","dataSplits","compute","split","delimiters","skipEmpty","delimiter","indexOf","token","tokenStart","stringSplitImpl","batchSize","tokens","maxNumEntries","parts","nEntries","c","stringToHashBucketFastImpl","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImpl","subComplexImpl","sub","Sub","subConfig","tileImpl","reps","topKImpl","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","join","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","sigmoid","Sigmoid","sigmoidConfig","applyActivation","activation","preluActivationWeights","leakyreluAlpha","reshape","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","bias","current","addRes","activationRes","intermediates","acos","Acos","acosConfig","acosh","Acosh","acoshConfig","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asin","Asin","asinConfig","asinh","Asinh","asinhConfig","atan","Atan","atanConfig","atan2Impl","atan2","Atan2","atan2Config","atanh","Atanh","atanhConfig","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","initialValue","NEGATIVE_INFINITY","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","bufferSync","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","clip","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipConfig","complexAbsConfig","ComplexAbs","complexVals","hypot","imagVal","imagConfig","Imag","computeOutShape","$inputs","filter","shapes","assertParamsConsistent","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cos","Cos","cosConfig","cosh","Cosh","coshConfig","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumsumConfig","Cumsum","exclusive","reverse","permutedAxis","resultDtype","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2dConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2dBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2dBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","out","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","splice","eluGradConfig","EluGrad","v","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","sign","erfConfig","$dim","expandDimsConfig","ExpandDims","realDivImpl","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","e","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","coordX","outIdx","outputValue","floorDivImpl","floorDiv","FloorDiv","floorDivConfig","fusedConv2DConfig","FusedConv2D","resultOld","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","prepareAndValidate","gatherV2Config","GatherV2","batchDims","$batchDims","indicesSize","parsedAxis","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","ifftConfig","IFFT","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","Infinity","isInfConfig","IsNan","isNaNConfig","linSpaceConfig","LinSpace","log1p","Log1p","log1pConfig","logicalAndImpl","logicalAnd","LogicalAnd","logicalAndConfig","logicalNot","LogicalNot","logicalNotConfig","logicalOrImpl","logicalOr","LogicalOr","logicalOrConfig","lRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","z","pow","lRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","mirrorPadConfig","MirrorPad","paddings","mode","coords","inIndex","modImpl","rem","mod","Mod","modConfig","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom.alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powImpl","Pow","powConfig","rangeConfig","Range","reciprocal","Reciprocal","reciprocalConfig","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","getImageCenter","sinFactor","sin","cosFactor","coordY","Round","base","roundConfig","scatterImpl","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","scatterNdConfig","ScatterNd","calculateShapes","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","selu","Selu","seluConfig","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$values","$denseShape","$defaultValue","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputData","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","s","sliceT","Sqrt","sqrtConfig","squareConfig","Square","Step","stepAttrs","NaN","stepConfig","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","sliceInfo","sliced","some","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","tileConfig","Tile","topKConfig","TopK","transformConfig","Transform","transforms","interpolation","fillMode","batchStride","rowStride","colStride","transformVals","transform","outY","outX","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","yFloor","xFloor","yCeil","xCeil","uniqueConfig","Unique","unpackConfig","Unpack","valueRank","tempRes","unsortedSegmentSumConfig","UnsortedSegmentSum","numSegments","numIters","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfigs","kernelConfig","registerKernel"],"mappings":"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CAwC,GACAG,GACAC,GACA6C,GACAW,GACAE,GACAoB,GACAE,GACAG,GACAE,GACAE,GACA0B,GACAT,GACA+D,GACA/C,GACAxhB,GACA8iB,GACAl2B,EACAo3B,GACAh3B,EACAk3B,GACA92B,EACA87B,GACAO,GACAE,GACAn8B,EACA68B,GACAC,GACAG,GACAE,GACAI,GACA77B,EACAI,EACA7I,EACAklC,GACA/Y,GACAmZ,GACAI,GACAE,GACAlsB,GACAzQ,GACAI,GACAw8B,GACAh8B,GACAo8B,GACAI,GACAG,GACAI,GACAC,GACAY,GACAj9B,GACA69B,GACAE,GACAE,GACAK,GACAE,GACAb,GACAqB,GACAI,GACA/+B,GACAi/B,GACAU,GACAW,GACAjgC,GACAM,GACA0gC,GACAU,GACAK,GACAnhC,GACA2hC,GACAU,GACAM,GACAE,GACAM,GACAl1B,GACAhN,GACAmiC,GACA9uC,EACAkvC,GACAn1B,GACAG,GACAa,GACAo0B,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAc,GACAtnC,GACA6nC,GACAG,GACAU,GACAl8B,GACAo8B,GACAE,GACAG,GACA/nC,GACA87B,GACAwM,GACAC,GACAQ,GACAO,GACAI,GACAM,GACAE,GACAI,GACAQ,GACAC,GACAhnC,GACAqnC,GACAC,GACAY,GACAG,GACAI,GACAvkC,GACAyjB,GACAkhB,GACAG,GACAC,GACAE,GACA/vC,GACAiwC,GACAiC,GACAE,GACAI,GACA7Q,IAGF,IAAK,MAAMwR,KAAgBD,GACzBE,iBAAeD,gDC5VD"}