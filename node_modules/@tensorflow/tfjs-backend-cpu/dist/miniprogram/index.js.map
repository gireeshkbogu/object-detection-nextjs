{"version":3,"file":"tf-backend-cpu.min.js","sources":["../src/cpu_util.ts","../src/backend_cpu.ts","../src/kernels/Abs.ts","../src/utils/binary_impl.ts","../src/kernels/Complex.ts","../src/utils/zeros_impl.ts","../src/kernels/Identity.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/utils/binary_utils.ts","../src/kernels/Add.ts","../src/kernels/Bincount_impl.ts","../src/utils/unary_impl.ts","../src/utils/unary_utils.ts","../src/kernels/Ceil.ts","../src/kernels/Concat_impl.ts","../src/kernels/Equal.ts","../src/kernels/Exp.ts","../src/kernels/Expm1.ts","../src/kernels/Floor.ts","../src/kernels/GatherNd_Impl.ts","../src/kernels/GatherV2_impl.ts","../src/kernels/Greater.ts","../src/kernels/GreaterEqual.ts","../src/kernels/Less.ts","../src/kernels/LessEqual.ts","../src/kernels/LinSpace_impl.ts","../src/kernels/Log.ts","../src/kernels/Max_impl.ts","../src/kernels/Maximum.ts","../src/kernels/Minimum.ts","../src/kernels/Multiply.ts","../src/kernels/Neg.ts","../src/kernels/NotEqual.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Transpose.ts","../src/kernels/Prod.ts","../src/kernels/Range_impl.ts","../src/kernels/Rsqrt.ts","../src/kernels/Slice.ts","../src/kernels/SparseFillEmptyRows_impl.ts","../src/kernels/SparseReshape_impl.ts","../src/kernels/SparseSegmentReduction_impl.ts","../src/kernels/SquaredDifference.ts","../src/kernels/StridedSlice_impl.ts","../src/kernels/StringNGrams_impl.ts","../src/kernels/StringSplit_impl.ts","../src/kernels/StringToHashBucketFast_impl.ts","../src/kernels/Sub.ts","../src/kernels/Tile_impl.ts","../src/kernels/TopK_impl.ts","../src/kernels/Unique_impl.ts","../src/base.ts","../src/kernels/Elu.ts","../src/kernels/LeakyRelu.ts","../src/kernels/Prelu.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/kernels/Sigmoid.ts","../src/utils/fused_utils.ts","../src/kernels/Reshape.ts","../src/kernels/BatchMatMul.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/AddN.ts","../src/kernels/All.ts","../src/kernels/Any.ts","../src/kernels/ArgMax.ts","../src/kernels/ArgMin.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atan2.ts","../src/kernels/Atanh.ts","../src/utils/pool_utils.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPool3D.ts","../src/kernels/AvgPool3DGrad.ts","../src/kernels/AvgPoolGrad.ts","../src/kernels/BatchNorm.ts","../src/kernels/BatchToSpaceND.ts","../src/kernels/Bincount.ts","../src/kernels/Clip.ts","../src/kernels/ComplexAbs.ts","../src/kernels/Imag.ts","../src/kernels/Concat.ts","../src/kernels/Conv2D.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/kernels/CropAndResize.ts","../src/kernels/Cumsum.ts","../src/kernels/DenseBincount.ts","../src/kernels/DepthToSpace.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/kernels/Diag.ts","../src/kernels/Dilation2D.ts","../src/kernels/Dilation2DBackpropFilter.ts","../src/kernels/Dilation2DBackpropInput.ts","../src/kernels/Sum.ts","../src/kernels/Einsum.ts","../src/kernels/EluGrad.ts","../src/kernels/Erf.ts","../src/kernels/ExpandDims.ts","../src/kernels/RealDiv.ts","../src/utils/fft_utils.ts","../src/kernels/FFT.ts","../src/kernels/Fill.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/FloorDiv.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/kernels/GatherNd.ts","../src/kernels/GatherV2.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/LinSpace.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalAnd.ts","../src/kernels/LogicalNot.ts","../src/kernels/LogicalOr.ts","../src/kernels/LRN.ts","../src/kernels/LRNGrad.ts","../src/kernels/Max.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPool3D.ts","../src/kernels/MaxPool3DGrad.ts","../src/kernels/MaxPoolGrad.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/Mean.ts","../src/kernels/Min.ts","../src/kernels/MirrorPad.ts","../src/kernels/Mod.ts","../src/kernels/Softmax.ts","../src/kernels/Multinomial.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/OneHot.ts","../src/kernels/ZerosLike.ts","../src/kernels/OnesLike.ts","../src/kernels/Pack.ts","../src/kernels/PadV2.ts","../src/kernels/Pow.ts","../src/kernels/Range.ts","../src/kernels/Reciprocal.ts","../src/kernels/ResizeBilinear.ts","../src/kernels/ResizeBilinearGrad.ts","../src/kernels/ResizeNearestNeighbor.ts","../src/kernels/ResizeNearestNeighborGrad.ts","../src/kernels/Reverse.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Scatter_impl.ts","../src/kernels/ScatterNd.ts","../src/kernels/Select.ts","../src/kernels/Selu.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/SparseFillEmptyRows.ts","../src/kernels/SparseReshape.ts","../src/kernels/SparseSegmentMean.ts","../src/kernels/SparseSegmentSum.ts","../src/kernels/SparseToDense.ts","../src/kernels/SplitV.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/Step.ts","../src/kernels/StridedSlice.ts","../src/kernels/StringNGrams.ts","../src/kernels/StringSplit.ts","../src/kernels/StringToHashBucketFast.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/kernels/Tile.ts","../src/kernels/TopK.ts","../src/kernels/Transform.ts","../src/kernels/Unique.ts","../src/kernels/Unpack.ts","../src/register_all_kernels.ts","../src/kernels/UnsortedSegmentSum.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there ðŸ‘‹. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    outBuf.values[i] = xBuf.values[originalIndex];\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n    }\n    if (row >= denseRows) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(`only one output dimension may be -1, not both ${\n            unknownIndex} and ${d}`);\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(`size ${d} must be non-negative, not ${size}`);\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          'reshape cannot infer the missing ' +\n          'input size for an empty tensor unless all ' +\n          'specified input sizes are non-zero');\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${\n          product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(`Input to reshape is a tensor with ${\n        denseSize} dense values, but the requested shape has ${\n        outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n  if (numIndices !== segmentIds.length) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(`segment ids are not increasing`);\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(`Segment id ${outIndex} out of range [0, ${\n          outputRows}), possibly because segmentIds input is not sorted.`);\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(`Bad: indices[${i}] == ${indices[i]} out of range [0, ${\n            inputFlat[0]})`);\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean): Uint8Array[] {\n  if (!str.length) {\n    return [];\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    const result: Uint8Array[] = new Array(str.length);\n    for (let i = 0; i < str.length; ++i) {\n      result[i] = str.subarray(i, i + 1);\n    }\n    return result;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    const result: Uint8Array[] = [];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return result;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  const result: Uint8Array[] = [];\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n  return result;\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const parts = split(input[i], delimiter, skipEmpty);\n    const nEntries = parts.length;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n    tokens.push(...parts);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n\n  return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clip,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\nexport const lRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\nexport const lRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function scatterImpl<R extends Rank>(\n    indices: TensorBuffer<R>, updates: TensorBuffer<R>, shape: number[],\n    outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: number,\n    sumDupeIndices: boolean): TensorBuffer<R> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values as TypedArray;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  (outBuf.values as TypedArray).fill(defaultValue);\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] +=\n            updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, $defaultValue, sumDupeIndices);\n\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const xBuf = backend.bufferSync($x);\n    const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const strides = util.computeStrides(image.shape);\n  const batchStride = strides[0];\n  const rowStride = strides[1];\n  const colStride = strides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchStride + outY * rowStride + outX * colStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipConfig} from './kernels/Clip';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lRNConfig} from './kernels/LRN';\nimport {lRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2dConfig,\n  dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig,\n  realDivConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lRNConfig,\n  lRNGradConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transposeConfig,\n  transformConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.7.0';\nexport {version};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","_super","_this","data","DataStorage","engine","tslib_1.__extends","MathBackendCPU","nextDataId","values","shape","this","firstUse","env","get","backend_util","warn","dataId","id","set","refCount","outId","length","isString","encodedValues","map","d","encodeString","write","has","numDataIds","readSync","_a","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","decodedData","decodeString","Error","buffer","makeTensorFromDataId","force","disposeData","delete","tensorInfo","f","start","now","kernelMs","unreliable","reasons","condition","condVals","epsilon","KernelBackend","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","cpuBackend","backend","sizeFromShape","makeOutput","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","inputs","realVals","imagVals","complexInfo","makeTensorInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","incRef","identityConfig","Identity","input","realVal","realConfig","Real","cast","attrs","zerosTensorInfo","floatX","disposeIntermediateTensorInfo","realPart","hasEncodingLoss","Int32Array","from","xVals","zero","toTypedArray","resultData","resultShape","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","_b","a","b","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","_c","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","_d","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","add","Add","addConfig","bincountImpl","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","Ceil","ceilConfig","concatImpl","outShape","simplyConcat","offset_1","colOffset_1","tIdx","row","resIdx","col","equalImpl","equal","Equal","equalConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","Expm1","expm1Config","floorImpl","floor","Floor","floorConfig","gatherNdImpl","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","strides","paramsShape","paramsSize","index","flattenIndex","dim","push","k","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greater","Greater","greaterConfig","greaterEqualImpl","greaterEqual","GreaterEqual","greaterEqualConfig","lessImpl","less","Less","lessConfig","lessEqualImpl","lessEqual","LessEqual","lessEqualConfig","linSpaceImpl","stop","num","step","logImpl","log","Log","logConfig","maxImpl","reduceSize","offset","max","Number","isNaN","maximumImpl","aValue","bValue","maximum","Maximum","maximumConfig","minimumImpl","min","minimum","Minimum","minimumConfig","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqual","NotEqual","notEqualConfig","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","i_1","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","outDtype","upcastType","prod_1","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","getInnerMostAxes","expandShapeToKeepDim","rangeImpl","numElements","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","subarray","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","assertParamsValid","sliceConfig","Slice","sparseFillEmptyRowsImpl","indices","indicesShape","indicesDType","valuesDType","denseShape","defaultValue","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","rank","outputIndices","outputValues","rowsAreOrdered","lastIndicesRow","csrOffset","fill","allRowsFull","rowEmpty","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","outputShape","product","unknownIndex","missing","trunc","outputSize","inputRank","inputStrides","outputStrides","newIndices","sparseSegmentReductionImpl","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","outputLength","reduce","output","end","uninitializedIndex","outIndex","nextIndex","squaredDifferenceImpl","diff","squaredDifference","SquaredDifference","squaredDifferenceConfig","stridedSliceImpl","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","StringNGramsOp","nGramWidth","getPadWidth","splitIndex","outputStartIndex","numNGrams","nGramIndex","this_1","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","splits","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","length_1","this_2","getNumNGrams","nGrams","outputStartIdx","this_3","createNGrams","dataLength","stringNGramsImpl","dataSplits","compute","split","delimiters","skipEmpty","result_1","delimiter","result_2","indexOf","token","tokenStart","stringSplitImpl","batchSize","tokens","maxNumEntries","parts","nEntries","c","stringToHashBucketFastImpl","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImpl","subComplexImpl","sub","Sub","subConfig","tileImpl","reps","topKImpl","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","join","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","sigmoid","Sigmoid","sigmoidConfig","applyActivation","activation","preluActivationWeights","leakyreluAlpha","reshape","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","current","addRes","activationRes","bias","intermediates","intermediates_1","_i","acos","Acos","acosConfig","acosh","Acosh","acoshConfig","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all_1","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asin","Asin","asinConfig","asinh","Asinh","asinhConfig","atan","Atan","atanConfig","atan2Impl","atan2","Atan2","atan2Config","atanh","Atanh","atanhConfig","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","initialValue","NEGATIVE_INFINITY","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","strides_1","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","bufferSync","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","prod","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","clip","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipConfig","complexAbsConfig","ComplexAbs","complexVals","real_1","imag_1","hypot","imagVal","imagConfig","Imag","computeOutShape","$inputs","filter","shapes","assertParamsConsistent","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cos","Cos","cosConfig","cosh","Cosh","coshConfig","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","top_1","bottom","closestX","round","closestY","inInd","outInd","cumsumConfig","Cumsum","exclusive","reverse","permutedAxis","resultDtype","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2dConfig","Dilation2D","filterVals","filterRank","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2dBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2dBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","sum_1","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","allDims","summedDims","idDims","checkEinsumDimSizes","path","steps","nSteps","out","numDimsRemaining","tensorsToDispose","idTerm","dimsToExpand","isIdentityPermutation","splice","tensorsToDispose_1","_e","eluGradConfig","EluGrad","v","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","sign","erfConfig","expandDims","$dim","expandDimsConfig","ExpandDims","realDivImpl","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","input_1","getComplexWithIndex","$realInfo","$imagInfo","fftImpl","inputSize","fftRadix2","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","e","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","real_2","imag_2","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","colOffset","coordX","outIdx","outputValue","floorDivImpl","floorDiv","FloorDiv","floorDivConfig","fusedConv2DConfig","FusedConv2D","resultOld","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","gatherV2Config","GatherV2","batchDims","$batchDims","indicesSize","parsedAxis","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","ifftConfig","IFFT","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","Infinity","isInfConfig","IsNan","isNaNConfig","linSpaceConfig","LinSpace","log1p","Log1p","log1pConfig","logicalAndImpl","logicalAnd","LogicalAnd","logicalAndConfig","logicalNot","LogicalNot","logicalNotConfig","logicalOrImpl","logicalOr","LogicalOr","logicalOrConfig","lRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","z","pow","lRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","maxPools","pooled","indexes","pooledDataId","indexesDataId","meanConfig","Mean","computeOutAndReduceShapes","toDispose","reduceSizeScalar","minConfig","Min","min_1","mirrorPadConfig","MirrorPad","paddings","mode","coords","inIndex","modImpl","rem","mod","Mod","modConfig","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event_1","random","seedrandom.alea","sampleId","event_2","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powImpl","Pow","powConfig","rangeConfig","Range","reciprocal","Reciprocal","reciprocalConfig","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","sinFactor","sin","cosFactor","coordY","Round","base","roundConfig","scatterImpl","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","scatterNdConfig","ScatterNd","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","selu","Selu","seluConfig","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$values","$denseShape","$defaultValue","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputData","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","s","sliceT","Sqrt","sqrtConfig","squareConfig","Square","Step","stepAttrs","NaN","stepConfig","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","sliced","some","stringNGramsConfig","StringNGrams","stringSplitConfig","StringSplit","stringToHashBucketFastConfig","StringToHashBucketFast","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","tileConfig","Tile","topKConfig","TopK","transformConfig","Transform","transforms","interpolation","fillMode","batchStride","rowStride","colStride","transformVals","transform_1","outY","outX","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","yFloor","xFloor","yCeil","xCeil","uniqueConfig","Unique","unpackConfig","Unpack","valueRank","tempRes","unsortedSegmentSumConfig","UnsortedSegmentSum","numSegments","numIters","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfigs_1","kernelConfig","registerKernel"],"mappings":"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sC,GAAO1sC,UAASmD,MAAO,CAAC9H,MAAO,aAC/CsnD,EACF30C,GAAS,CAAC/L,OAAQ,CAACsC,EAAGm+C,EAAYl+C,EAAG1E,GAAIE,YACvC4iD,EACF3hC,GAAI,CAAChf,OAAQ,CAACnC,EAAG6iD,GAAM3iD,UAASmD,MAAO,CAAC8M,KAAM,EAAGC,UAAU,KAC/DxB,EAAI/D,KAAKi4C,GACThhC,EAAcjX,KAAK83C,GACnB7gC,EAAcjX,KAAK+hC,GACnB9qB,EAAcjX,KAAK+3C,GACnB9gC,EAAcjX,KAAKg4C,GACnB/gC,EAAcjX,KAAKi4C,GAGrB,IAAM7hD,EAASkxC,GAAK,CAAChwC,OAAQyM,EAAK1O,UAASmD,MAAO,CAAC8M,KAAM,KAIzD,OAFA2R,EAAc3mB,SAAQ,SAAAC,GAAK,OAAA8E,EAAQsD,8BAA8BpI,MAE1D6F,SD+QkB8hD,GArKW,CACpCvhC,GACA9hB,EACAyiB,GACAG,GACA3b,EACA4b,GACAI,GACAQ,GACAG,GACAI,GACAK,GACAG,GACAG,GACAI,GACAG,GACAmF,GACAY,GACAI,GACAqB,GACA9K,GACAuL,GACAkB,GACAiB,GACA9qB,EACAqE,EACAinB,GACAhtB,EACAitB,GACAwB,GACAkC,GACAU,GACAZ,GACAkC,GACAmB,GACA9B,GACAwC,GACAG,GACAC,GACA8C,GACAW,GACAE,GACAoB,GACAE,GACAG,GACAE,GACAE,GACAyB,GACAT,GACA8D,GACA7C,GACA/hB,GACAkjB,GACA52B,EACA83B,GACA13B,EACA63B,GACAz3B,EACA48B,GACAO,GACAE,GACAj9B,EACA49B,GACAC,GACAG,GACAE,GACAG,GACA38B,EACAI,GACAhJ,EACAmmC,GACAjZ,GACAqZ,GACAI,GACAE,GACA1sB,GACA/Q,GACAI,GACAs9B,GACA98B,GACAk9B,GACAI,GACAG,GACAI,GACAC,GACAY,GACA99B,GACA0+B,GACAE,GACAE,GACAK,GACAE,GACAb,GACAoB,GACAK,GACA5/B,GACA+/B,GACAU,GACAW,GACA/gC,GACAM,GACAyhC,GACAU,GACAK,GACAliC,GACAsiC,GACAU,GACAM,GACAE,GACAM,GACAx1B,GACArN,GACA8iC,GACA7vC,EACAiwC,GACAz1B,GACAG,GACAa,GACA00B,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAa,GACAhoC,GACAuoC,GACAE,GACAU,GACAt8B,GACAw8B,GACAE,GACAG,GACAzoC,GACA68B,GACAmM,GACAC,GACAQ,GACAO,GACAI,GACAM,GACAE,GACAI,GACAQ,GACAC,GACA1nC,GACA+nC,GACAC,GACAW,GACAE,GACAE,GACAvkC,GACAgkB,GACA2gB,GACAG,GACAC,GACAE,GACAnwC,GACAqwC,GACAiC,GACAE,GACAI,GACAvQ,IAGyB9vB,aAAAA,KAAe,CAArC,IAAMghC,UACTC,iBAAeD,iDE5VD"}