{"version":3,"file":"tf-backend-cpu.fesm.min.js","sources":["../src/cpu_util.ts","../src/backend_cpu.ts","../src/kernels/Abs.ts","../src/utils/binary_impl.ts","../src/kernels/Complex.ts","../src/utils/zeros_impl.ts","../src/kernels/Identity.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/utils/binary_utils.ts","../src/kernels/Add.ts","../src/kernels/Bincount_impl.ts","../src/utils/unary_impl.ts","../src/utils/unary_utils.ts","../src/kernels/Ceil.ts","../src/kernels/Concat_impl.ts","../src/kernels/Equal.ts","../src/kernels/Exp.ts","../src/kernels/Expm1.ts","../src/kernels/Floor.ts","../src/kernels/GatherNd_Impl.ts","../src/kernels/GatherV2_impl.ts","../src/kernels/Greater.ts","../src/kernels/GreaterEqual.ts","../src/kernels/Less.ts","../src/kernels/LessEqual.ts","../src/kernels/LinSpace_impl.ts","../src/kernels/Log.ts","../src/kernels/Max_impl.ts","../src/kernels/Maximum.ts","../src/kernels/Minimum.ts","../src/kernels/Multiply.ts","../src/kernels/Neg.ts","../src/kernels/NotEqual.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Transpose.ts","../src/kernels/Prod.ts","../src/kernels/Range_impl.ts","../src/kernels/Rsqrt.ts","../src/kernels/Slice.ts","../src/kernels/SparseFillEmptyRows_impl.ts","../src/kernels/SparseReshape_impl.ts","../src/kernels/SparseSegmentReduction_impl.ts","../src/kernels/SquaredDifference.ts","../src/kernels/StridedSlice_impl.ts","../src/kernels/StringNGrams_impl.ts","../src/kernels/StringSplit_impl.ts","../src/kernels/StringToHashBucketFast_impl.ts","../src/kernels/Sub.ts","../src/kernels/Tile_impl.ts","../src/kernels/TopK_impl.ts","../src/kernels/Unique_impl.ts","../src/version.ts","../src/base.ts","../src/kernels/Elu.ts","../src/kernels/LeakyRelu.ts","../src/kernels/Prelu.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/kernels/Sigmoid.ts","../src/utils/fused_utils.ts","../src/kernels/Reshape.ts","../src/kernels/BatchMatMul.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/AddN.ts","../src/kernels/All.ts","../src/kernels/Any.ts","../src/kernels/ArgMax.ts","../src/kernels/ArgMin.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atan2.ts","../src/kernels/Atanh.ts","../src/utils/pool_utils.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPool3D.ts","../src/kernels/AvgPool3DGrad.ts","../src/kernels/AvgPoolGrad.ts","../src/kernels/BatchNorm.ts","../src/kernels/BatchToSpaceND.ts","../src/kernels/Bincount.ts","../src/kernels/Clip.ts","../src/kernels/ComplexAbs.ts","../src/kernels/Imag.ts","../src/kernels/Concat.ts","../src/kernels/Conv2D.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/kernels/CropAndResize.ts","../src/kernels/Cumsum.ts","../src/kernels/DenseBincount.ts","../src/kernels/DepthToSpace.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/kernels/Diag.ts","../src/kernels/Dilation2D.ts","../src/kernels/Dilation2DBackpropFilter.ts","../src/kernels/Dilation2DBackpropInput.ts","../src/kernels/Sum.ts","../src/kernels/Einsum.ts","../src/kernels/EluGrad.ts","../src/kernels/Erf.ts","../src/kernels/ExpandDims.ts","../src/kernels/RealDiv.ts","../src/utils/fft_utils.ts","../src/kernels/FFT.ts","../src/kernels/Fill.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/FloorDiv.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/kernels/GatherNd.ts","../src/kernels/GatherV2.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/LinSpace.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalAnd.ts","../src/kernels/LogicalNot.ts","../src/kernels/LogicalOr.ts","../src/kernels/LRN.ts","../src/kernels/LRNGrad.ts","../src/kernels/Max.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPool3D.ts","../src/kernels/MaxPool3DGrad.ts","../src/kernels/MaxPoolGrad.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/Mean.ts","../src/kernels/Min.ts","../src/kernels/MirrorPad.ts","../src/kernels/Mod.ts","../src/kernels/Softmax.ts","../src/kernels/Multinomial.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/OneHot.ts","../src/kernels/ZerosLike.ts","../src/kernels/OnesLike.ts","../src/kernels/Pack.ts","../src/kernels/PadV2.ts","../src/kernels/Pow.ts","../src/kernels/Range.ts","../src/kernels/Reciprocal.ts","../src/kernels/ResizeBilinear.ts","../src/kernels/ResizeBilinearGrad.ts","../src/kernels/ResizeNearestNeighbor.ts","../src/kernels/ResizeNearestNeighborGrad.ts","../src/kernels/Reverse.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Scatter_impl.ts","../src/kernels/ScatterNd.ts","../src/kernels/Select.ts","../src/kernels/Selu.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/SparseFillEmptyRows.ts","../src/kernels/SparseReshape.ts","../src/kernels/SparseSegmentMean.ts","../src/kernels/SparseSegmentSum.ts","../src/kernels/SparseToDense.ts","../src/kernels/SplitV.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/Step.ts","../src/kernels/StridedSlice.ts","../src/kernels/StringNGrams.ts","../src/kernels/StringSplit.ts","../src/kernels/StringToHashBucketFast.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/kernels/Transform.ts","../src/kernels/UnsortedSegmentSum.ts","../src/register_all_kernels.ts","../src/kernels/Tile.ts","../src/kernels/TopK.ts","../src/kernels/Unique.ts","../src/kernels/Unpack.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there ðŸ‘‹. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    outBuf.values[i] = xBuf.values[originalIndex];\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n    }\n    if (row >= denseRows) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(`only one output dimension may be -1, not both ${\n            unknownIndex} and ${d}`);\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(`size ${d} must be non-negative, not ${size}`);\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          'reshape cannot infer the missing ' +\n          'input size for an empty tensor unless all ' +\n          'specified input sizes are non-zero');\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${\n          product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(`Input to reshape is a tensor with ${\n        denseSize} dense values, but the requested shape has ${\n        outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n  if (numIndices !== segmentIds.length) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(`segment ids are not increasing`);\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(`Segment id ${outIndex} out of range [0, ${\n          outputRows}), possibly because segmentIds input is not sorted.`);\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(`Bad: indices[${i}] == ${indices[i]} out of range [0, ${\n            inputFlat[0]})`);\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean): Uint8Array[] {\n  if (!str.length) {\n    return [];\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    const result: Uint8Array[] = new Array(str.length);\n    for (let i = 0; i < str.length; ++i) {\n      result[i] = str.subarray(i, i + 1);\n    }\n    return result;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    const result: Uint8Array[] = [];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return result;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  const result: Uint8Array[] = [];\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n  return result;\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const parts = split(input[i], delimiter, skipEmpty);\n    const nEntries = parts.length;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n    tokens.push(...parts);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.7.0';\nexport {version};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n\n  return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clip,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\nexport const lRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\nexport const lRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function scatterImpl<R extends Rank>(\n    indices: TensorBuffer<R>, updates: TensorBuffer<R>, shape: number[],\n    outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: number,\n    sumDupeIndices: boolean): TensorBuffer<R> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values as TypedArray;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  (outBuf.values as TypedArray).fill(defaultValue);\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] +=\n            updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, $defaultValue, sumDupeIndices);\n\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const xBuf = backend.bufferSync($x);\n    const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const strides = util.computeStrides(image.shape);\n  const batchStride = strides[0];\n  const rowStride = strides[1];\n  const colStride = strides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchStride + outY * rowStride + outX * colStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipConfig} from './kernels/Clip';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lRNConfig} from './kernels/LRN';\nimport {lRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2dConfig,\n  dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig,\n  realDivConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lRNConfig,\n  lRNGradConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transposeConfig,\n  transformConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","[object Object]","super","this","data","DataStorage","engine","nextDataId","values","shape","firstUse","env","get","backend_util","warn","dataId","id","set","refCount","outId","length","isString","encodedValues","map","d","encodeString","write","has","numDataIds","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","decodedData","decodeString","Error","buffer","makeTensorFromDataId","force","disposeData","delete","tensorInfo","f","start","now","kernelMs","unreliable","reasons","condition","condVals","epsilon","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","makeOutput","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","makeTensorInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","incRef","identityConfig","Identity","input","realVal","realConfig","Real","cast","attrs","zerosTensorInfo","floatX","disposeIntermediateTensorInfo","realPart","hasEncodingLoss","Int32Array","from","xVals","zero","toTypedArray","resultData","resultShape","a","b","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","add","Add","addConfig","bincountImpl","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","ceilConfig","Ceil","concatImpl","outShape","simplyConcat","offset","colOffset","tIdx","row","resIdx","col","equalImpl","equal","Equal","equalConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","expm1Config","Expm1","floorImpl","floor","floorConfig","Floor","gatherNdImpl","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","strides","paramsShape","paramsSize","index","flattenIndex","dim","push","k","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greaterConfig","Greater","greaterEqualImpl","greaterEqualConfig","GreaterEqual","lessImpl","lessConfig","Less","lessEqualImpl","lessEqualConfig","LessEqual","linSpaceImpl","stop","num","step","logImpl","log","logConfig","Log","maxImpl","reduceSize","max","Number","isNaN","maximumImpl","aValue","bValue","maximumConfig","Maximum","minimumImpl","min","minimumConfig","Minimum","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqualConfig","NotEqual","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","getInnerMostAxes","expandShapeToKeepDim","rangeImpl","numElements","rsqrtImpl","sqrt","rsqrtConfig","Rsqrt","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","subarray","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","parseSliceParams","assertParamsValid","sliceConfig","Slice","sparseFillEmptyRowsImpl","indices","indicesShape","indicesDType","valuesDType","denseShape","defaultValue","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","rank","rowsAreOrdered","lastIndicesRow","csrOffset","fill","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","outputShape","product","unknownIndex","missing","trunc","outputSize","inputRank","inputStrides","outputStrides","newIndices","sparseSegmentReductionImpl","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","outputLength","reduce","output","end","uninitializedIndex","outIndex","nextIndex","squaredDifferenceImpl","diff","squaredDifferenceConfig","SquaredDifference","stridedSliceImpl","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","nGramWidth","getPadWidth","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","splits","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","getNumNGrams","nGrams","outputStartIdx","createNGrams","dataLength","stringNGramsImpl","dataSplits","compute","split","delimiters","skipEmpty","delimiter","indexOf","token","tokenStart","stringSplitImpl","batchSize","tokens","maxNumEntries","parts","nEntries","c","stringToHashBucketFastImpl","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImpl","sub","Sub","subConfig","tileImpl","reps","topKImpl","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","join","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","version","registerBackend","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","sigmoid","Sigmoid","sigmoidConfig","applyActivation","activation","preluActivationWeights","leakyreluAlpha","reshape","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","bias","current","addRes","activationRes","intermediates","acosConfig","Acos","acos","acoshConfig","Acosh","acosh","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asinConfig","Asin","asin","asinhConfig","Asinh","asinh","atanConfig","Atan","atan","atan2Config","Atan2","atan2","atanhConfig","Atanh","atanh","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","initialValue","NEGATIVE_INFINITY","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","bufferSync","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","clipConfig","ClipByValue","clipAttrs","clipValueMax","clipValueMin","complexAbsConfig","ComplexAbs","complexVals","hypot","imagVal","imagConfig","Imag","computeOutShape","$inputs","filter","shapes","assertParamsConsistent","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cosConfig","Cos","cos","coshConfig","Cosh","cosh","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumsumConfig","Cumsum","exclusive","reverse","permutedAxis","resultDtype","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2dConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2dBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2dBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","out","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","splice","eluGradConfig","EluGrad","v","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erfConfig","Erf","sign","$dim","expandDimsConfig","ExpandDims","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","e","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","coordX","outIdx","outputValue","floorDivConfig","FloorDiv","fusedConv2DConfig","FusedConv2D","resultOld","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","prepareAndValidate","gatherV2Config","GatherV2","batchDims","$batchDims","indicesSize","parsedAxis","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","ifftConfig","IFFT","isFiniteConfig","IsFinite","isFinite","isInfConfig","IsInf","Infinity","isNaNConfig","IsNan","linSpaceConfig","LinSpace","log1pConfig","Log1p","log1p","logicalAndConfig","LogicalAnd","logicalNotConfig","LogicalNot","logicalOrConfig","LogicalOr","lRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","z","pow","lRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","mirrorPadConfig","MirrorPad","paddings","mode","coords","inIndex","modConfig","Mod","rem","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom.alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powConfig","Pow","rangeConfig","Range","reciprocalConfig","Reciprocal","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","getImageCenter","sinFactor","sin","cosFactor","coordY","roundConfig","Round","base","scatterImpl","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","scatterNdConfig","ScatterNd","calculateShapes","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","signConfig","Sign","sinConfig","Sin","sinhConfig","Sinh","sinh","threshold","softplusConfig","Softplus","tooLarge","tooSmall","expX","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$values","$denseShape","$defaultValue","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputData","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","s","sliceT","sqrtConfig","Sqrt","squareConfig","Square","stepConfig","Step","stepAttrs","NaN","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","sliceInfo","sliced","some","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tanConfig","Tan","tan","tanh","Tanh","mapCoord","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","batchStride","rowStride","colStride","nearestInterpolation","bilinearInterpolation","yFloor","xFloor","yCeil","xCeil","kernelConfigs","Tile","TopK","Transform","transforms","interpolation","fillMode","transformVals","transform","outY","outX","projection","inX","inY","Unique","Unpack","valueRank","tempRes","UnsortedSegmentSum","numSegments","numIters","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfig","registerKernel"],"mappings":"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B,ICpKhD,MCuGDyI,GAAgC,CACpCp+B,GACA5gB,GACAmhB,GACAG,GACAza,GACA4a,GACAI,GACAQ,GACAG,GACAI,GACAG,GACAG,GACAG,GACAG,GACAG,GACAqF,GACAW,GACAI,GACAqB,GACA1K,GACAmL,GACAkB,GACAgB,GACArpB,GACA8D,GACA0lB,GACAprB,GACAyrB,GACAsB,GACAkC,GACAU,GACAZ,GACAkC,GACAmB,GACA9B,GACAsC,GACAG,GACAG,GACA6C,GACAW,GACAE,GACAoB,GACAE,GACAG,GACAE,GACAE,GACA0B,GACAT,GACA6D,GACA7C,GACAthB,GACA4iB,GACAx1B,GACAu2B,GACAn2B,GACAu2B,GACAp2B,GACAm7B,GACAO,GACAE,GACAx7B,GACA+7B,GACAE,GACAG,GACAE,GACAI,GACAj7B,GACAG,GACAzI,GACAmkC,GACA3Y,GACA6Y,GACAG,GACAG,GACA1rB,GACArQ,GACAG,GACA87B,GACAt7B,GACAw7B,GACAG,GACAE,GACAE,GACAE,GACAY,GACAn8B,GACA+8B,GACAE,GACAE,GACAK,GACAE,GACAb,GACAqB,GACAI,GACAl+B,GACAo+B,GACAM,GACAa,GACAj/B,GACAM,GACA0/B,GACAU,GACAK,GACArgC,GACA6gC,GACAU,GACAM,GACAE,GACAI,GACAl0B,GACA/M,GACAmhC,GACAttC,GACAwtC,GACAl0B,GACAG,GACAa,GACAozB,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAY,GACArmC,GACA8mC,GACAG,GACAQ,GACAh7B,GACAk7B,GACAE,GACAE,GACA5mC,GACAg7B,GACAgM,GACAK,GACAQ,GACAO,GACAI,GACAM,GACAE,GACAI,GACAO,GACAE,GACAhmC,GACAkmC,GACAI,GACAY,GACAG,GACAI,GACAvjC,GACAyjB,GACAggB,GH3TsC,CACtCr9C,WAAYy9C,GACZv9C,YAAa,MACbC,WAAYq9C,IIU0B,CACtCx9C,WAAYg/C,GACZ9+C,YAAa,MACbC,oBAfEC,GAEF,MAAME,OAACA,EAAME,QAAEA,EAAO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"}